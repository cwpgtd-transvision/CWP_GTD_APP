!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(t._Highcharts,t._Highcharts.SeriesRegistry):"function"==typeof define&&define.amd?define("highcharts/indicators/aroon",["highcharts/highcharts"],function(t){return e(t,t.SeriesRegistry)}):"object"==typeof exports?exports["highcharts/indicators/aroon"]=e(t._Highcharts,t._Highcharts.SeriesRegistry):t.Highcharts=e(t.Highcharts,t.Highcharts.SeriesRegistry)}("undefined"==typeof window?this:window,(P,S)=>(()=>{"use strict";var o={512:t=>{t.exports=S},944:t=>{t.exports=P}},r={};function n(t){var e=r[t];if(void 0!==e)return e.exports;e=r[t]={exports:{}};return o[t](e,e.exports,n),e.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var t,e={},a=(n.d(e,{default:()=>G}),n(944)),a=n.n(a),i=n(512),i=n.n(i);const y=i().seriesTypes["sma"]["prototype"],{defined:g,error:m,merge:x}=a();{var s=t=t||{};const M=["bottomLine"],N=["top","bottom"],O=["top"];function A(t){return"plot"+t.charAt(0).toUpperCase()+t.slice(1)}function v(t,e){const o=[];return(t.pointArrayMap||[]).forEach(t=>{t!==e&&o.push(A(t))}),o}function p(){const o=this,t=o.pointValKey,e=o.linesApiNames,r=o.areaLinesNames,n=o.points,a=o.options,i=o.graph,s={options:{gapSize:a.gapSize}},p=[],l=v(o,t);let h=n.length,c;var u,f,d;l.forEach((t,e)=>{for(p[e]=[];h--;)c=n[h],p[e].push({x:c.x,plotX:c.plotX,plotY:c[t],isNull:!g(c[t])});h=n.length}),o.userOptions.fillColor&&r.length&&(u=l.indexOf(A(r[0])),u=p[u],f=1===r.length?n:p[l.indexOf(A(r[1]))],d=o.color,o.points=f,o.nextPoints=u,o.color=o.userOptions.fillColor,o.options=x(n,s),o.graph=o.area,o.fillGraph=!0,y.drawGraph.call(o),o.area=o.graph,delete o.nextPoints,delete o.fillGraph,o.color=d),e.forEach((t,e)=>{p[e]?(o.points=p[e],a[t]?o.options=x(a[t].styles,s):m('Error: "There is no '+t+' in DOCS options declared. Check if linesApiNames are consistent with your DOCS line names."'),o.graph=o["graph"+t],y.drawGraph.call(o),o["graph"+t]=o.graph):m('Error: "'+t+" doesn't have equivalent in pointArrayMap. To many elements in linesApiNames relative to pointArrayMap.\"")}),o.points=n,o.options=a,o.graph=i,y.drawGraph.call(o)}function l(t){let e,o=[],r;if(t=t||this.points,this.fillGraph&&this.nextPoints){if((e=y.getGraphPath.call(this,this.nextPoints))&&e.length){e[0][0]="L",o=y.getGraphPath.call(this,t);for(let t=(r=e.slice(0,o.length)).length-1;0<=t;t--)o.push(r[t])}}else o=y.getGraphPath.apply(this,arguments);return o}function h(e){const o=[];return(this.pointArrayMap||[]).forEach(t=>{o.push(e[t])}),o}function c(){const t=this.pointArrayMap;let r,n;r=v(this),y.translate.apply(this,arguments),this.points.forEach(o=>{t.forEach((t,e)=>{n=o[t],null!==(n=this.dataModify?this.dataModify.modifyValue(n):n)&&(o[r[e]]=this.yAxis.toPixels(n,!0))})})}s.compose=function(t){const e=t.prototype;return e.linesApiNames=e.linesApiNames||M.slice(),e.pointArrayMap=e.pointArrayMap||N.slice(),e.pointValKey=e.pointValKey||"top",e.areaLinesNames=e.areaLinesNames||O.slice(),e.drawGraph=p,e.getGraphPath=l,e.toYData=h,e.translate=c,t}}const u=t;s=i().seriesTypes.sma;const{extend:f,merge:d,pick:w}=a();function b(t,e){let o=t[0],r=0,n;for(n=1;n<t.length;n++)("max"===e&&t[n]>=o||"min"===e&&t[n]<=o)&&(o=t[n],r=n);return r}class D extends s{getValues(t,e){const o=e.period,r=t.xData,n=t.yData,a=n?n.length:0,i=[],s=[],p=[];let l,h,c,u,f;for(u=o-1;u<a;u++)c=b((f=n.slice(u-o+1,u+2)).map(function(t){return w(t[2],t)}),"min"),l=b(f.map(function(t){return w(t[1],t)}),"max")/o*100,h=c/o*100,r[u+1]&&(i.push([r[u+1],l,h]),s.push(r[u+1]),p.push([l,h]));return{values:i,xData:s,yData:p}}}D.defaultOptions=d(s.defaultOptions,{params:{index:void 0,period:25},marker:{enabled:!1},tooltip:{pointFormat:'<span style="color:{point.color}">‚óè</span><b> {series.name}</b><br/>Aroon Up: {point.y}<br/>Aroon Down: {point.aroonDown}<br/>'},aroonDown:{styles:{lineWidth:1,lineColor:void 0}},dataGrouping:{approximation:"averages"}}),f(D.prototype,{areaLinesNames:[],linesApiNames:["aroonDown"],nameBase:"Aroon",pointArrayMap:["y","aroonDown"],pointValKey:"y"}),u.compose(D),i().registerSeriesType("aroon",D);const G=a();return e.default})());