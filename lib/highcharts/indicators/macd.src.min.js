!function(s,o){"object"==typeof exports&&"object"==typeof module?module.exports=o(s._Highcharts,s._Highcharts.SeriesRegistry):"function"==typeof define&&define.amd?define("highcharts/indicators/macd",["highcharts/highcharts"],function(s){return o(s,s.SeriesRegistry)}):"object"==typeof exports?exports["highcharts/indicators/macd"]=o(s._Highcharts,s._Highcharts.SeriesRegistry):s.Highcharts=o(s.Highcharts,s.Highcharts.SeriesRegistry)}("undefined"==typeof window?this:window,(y,u)=>(()=>{"use strict";var e={512:s=>{s.exports=u},944:s=>{s.exports=y}},t={};function i(s){var o=t[s];if(void 0!==o)return o.exports;o=t[s]={exports:{}};return e[s](o,o.exports,i),o.exports}i.n=s=>{var o=s&&s.__esModule?()=>s.default:()=>s;return i.d(o,{a:o}),o},i.d=(s,o)=>{for(var e in o)i.o(o,e)&&!i.o(s,e)&&Object.defineProperty(s,e,{enumerable:!0,get:o[e]})},i.o=(s,o)=>Object.prototype.hasOwnProperty.call(s,o);var s={},o=(i.d(s,{default:()=>h}),i(944)),n=i.n(o),o=i(512),d=i.n(o),o=n()["noop"],r=d().seriesTypes["sma"];const{extend:a,correctFloat:c,defined:g,merge:l}=n();class p extends r{init(){d().seriesTypes.sma.prototype.init.apply(this,arguments);var s=this.color;this.options&&(g(this.colorIndex)&&(this.options.signalLine&&this.options.signalLine.styles&&!this.options.signalLine.styles.lineColor&&(this.options.colorIndex=this.colorIndex+1,this.getCyclic("color",void 0,this.chart.options.colors),this.options.signalLine.styles.lineColor=this.color),this.options.macdLine&&this.options.macdLine.styles&&!this.options.macdLine.styles.lineColor&&(this.options.colorIndex=this.colorIndex+1,this.getCyclic("color",void 0,this.chart.options.colors),this.options.macdLine.styles.lineColor=this.color)),this.macdZones={zones:this.options.macdLine.zones,startIndex:0},this.signalZones={zones:this.macdZones.zones.concat(this.options.signalLine.zones),startIndex:this.macdZones.zones.length}),this.color=s}toYData(s){return[s.y,s.signal,s.MACD]}translate(){const t=this,i=["plotSignal","plotMACD"];n().seriesTypes.column.prototype.translate.apply(t),t.points.forEach(function(e){[e.signal,e.MACD].forEach(function(s,o){null!==s&&(e[i[o]]=t.yAxis.toPixels(s,!0))})})}destroy(){this.graph=null,this.graphmacd=this.graphmacd&&this.graphmacd.destroy(),this.graphsignal=this.graphsignal&&this.graphsignal.destroy(),d().seriesTypes.sma.prototype.destroy.apply(this,arguments)}drawGraph(){const e=this,s=e.points,t=e.options,o=e.zones,i={options:{gapSize:t.gapSize}},n=[[],[]];let r,a=s.length;for(;a--;)r=s[a],g(r.plotMACD)&&n[0].push({plotX:r.plotX,plotY:r.plotMACD,isNull:!g(r.plotMACD)}),g(r.plotSignal)&&n[1].push({plotX:r.plotX,plotY:r.plotSignal,isNull:!g(r.plotMACD)});["macd","signal"].forEach((s,o)=>{e.points=n[o],e.options=l(t[s+"Line"]?.styles||{},i),e.graph=e["graph"+s],e.zones=(e[s+"Zones"].zones||[]).slice(e[s+"Zones"].startIndex||0),d().seriesTypes.sma.prototype.drawGraph.call(e),e["graph"+s]=e.graph}),e.points=s,e.options=t,e.zones=o}applyZones(){var s=this.zones;this.zones=this.signalZones.zones,d().seriesTypes.sma.prototype.applyZones.call(this),this.graphmacd&&this.options.macdLine.zones.length&&this.graphmacd.hide(),this.zones=s}getValues(s,o){const e=o.longPeriod-o.shortPeriod,t=[],i=[],n=[];let r,a,l,p=0,h;if(!(s.xData.length<o.longPeriod+o.signalPeriod)){for(r=d().seriesTypes.ema.prototype.getValues(s,{period:o.shortPeriod,index:o.index}),a=d().seriesTypes.ema.prototype.getValues(s,{period:o.longPeriod,index:o.index}),r=r.values,a=a.values,l=0;l<=r.length;l++)g(a[l])&&g(a[l][1])&&g(r[l+e])&&g(r[l+e][0])&&t.push([r[l+e][0],0,null,r[l+e][1]-a[l][1]]);for(l=0;l<t.length;l++)i.push(t[l][0]),n.push([0,null,t[l][3]]);for(h=d().seriesTypes.ema.prototype.getValues({xData:i,yData:n},{period:o.signalPeriod,index:2}).values,l=0;l<t.length;l++)t[l][0]>=h[0][0]&&(t[l][2]=h[p][1],n[l]=[0,h[p][1],t[l][3]],null===t[l][3]?(t[l][1]=0,n[l][0]=0):(t[l][1]=c(t[l][3]-h[p][1]),n[l][0]=c(t[l][3]-h[p][1])),p++);return{values:t,xData:i,yData:n}}}}p.defaultOptions=l(r.defaultOptions,{params:{shortPeriod:12,longPeriod:26,signalPeriod:9,period:26},signalLine:{zones:[],styles:{lineWidth:1,lineColor:void 0}},macdLine:{zones:[],styles:{lineWidth:1,lineColor:void 0}},threshold:0,groupPadding:.1,pointPadding:.1,crisp:!1,states:{hover:{halo:{size:0}}},tooltip:{pointFormat:'<span style="color:{point.color}">‚óè</span> <b> {series.name}</b><br/>Value: {point.MACD}<br/>Signal: {point.signal}<br/>Histogram: {point.y}<br/>'},dataGrouping:{approximation:"averages"},minPointLength:0}),a(p.prototype,{nameComponents:["longPeriod","shortPeriod","signalPeriod"],pointArrayMap:["y","signal","MACD"],parallelArrays:["x","y","signal","MACD"],pointValKey:"y",markerAttribs:o,getColumnMetrics:n().seriesTypes.column.prototype.getColumnMetrics,crispCol:n().seriesTypes.column.prototype.crispCol,drawPoints:n().seriesTypes.column.prototype.drawPoints}),d().registerSeriesType("macd",p);const h=n();return s.default})());