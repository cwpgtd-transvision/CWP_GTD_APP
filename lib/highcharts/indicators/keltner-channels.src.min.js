!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(e._Highcharts,e._Highcharts.SeriesRegistry):"function"==typeof define&&define.amd?define("highcharts/indicators/keltner-channels",["highcharts/highcharts"],function(e){return t(e,e.SeriesRegistry)}):"object"==typeof exports?exports["highcharts/indicators/keltner-channels"]=t(e._Highcharts,e._Highcharts.SeriesRegistry):e.Highcharts=t(e.Highcharts,e.Highcharts.SeriesRegistry)}("undefined"==typeof window?this:window,(w,N)=>(()=>{"use strict";var o={512:e=>{e.exports=N},944:e=>{e.exports=w}},i={};function r(e){var t=i[e];if(void 0!==t)return t.exports;t=i[e]={exports:{}};return o[e](t,t.exports,r),t.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var e,t={},s=(r.d(t,{default:()=>T}),r(944)),s=r.n(s),n=r(512),b=r.n(n);const f=b().seriesTypes["sma"]["prototype"],{defined:m,error:g,merge:x}=s();{n=e=e||{};const L=["bottomLine"],G=["top","bottom"],M=["top"];function A(e){return"plot"+e.charAt(0).toUpperCase()+e.slice(1)}function v(e,t){const o=[];return(e.pointArrayMap||[]).forEach(e=>{e!==t&&o.push(A(e))}),o}function a(){const o=this,e=o.pointValKey,t=o.linesApiNames,i=o.areaLinesNames,r=o.points,s=o.options,n=o.graph,a={options:{gapSize:s.gapSize}},p=[],l=v(o,e);let h=r.length,c;var d,u,y;l.forEach((e,t)=>{for(p[t]=[];h--;)c=r[h],p[t].push({x:c.x,plotX:c.plotX,plotY:c[e],isNull:!m(c[e])});h=r.length}),o.userOptions.fillColor&&i.length&&(d=l.indexOf(A(i[0])),d=p[d],u=1===i.length?r:p[l.indexOf(A(i[1]))],y=o.color,o.points=u,o.nextPoints=d,o.color=o.userOptions.fillColor,o.options=x(r,a),o.graph=o.area,o.fillGraph=!0,f.drawGraph.call(o),o.area=o.graph,delete o.nextPoints,delete o.fillGraph,o.color=y),t.forEach((e,t)=>{p[t]?(o.points=p[t],s[e]?o.options=x(s[e].styles,a):g('Error: "There is no '+e+' in DOCS options declared. Check if linesApiNames are consistent with your DOCS line names."'),o.graph=o["graph"+e],f.drawGraph.call(o),o["graph"+e]=o.graph):g('Error: "'+e+" doesn't have equivalent in pointArrayMap. To many elements in linesApiNames relative to pointArrayMap.\"")}),o.points=r,o.options=s,o.graph=n,f.drawGraph.call(o)}function p(e){let t,o=[],i;if(e=e||this.points,this.fillGraph&&this.nextPoints){if((t=f.getGraphPath.call(this,this.nextPoints))&&t.length){t[0][0]="L",o=f.getGraphPath.call(this,e);for(let e=(i=t.slice(0,o.length)).length-1;0<=e;e--)o.push(i[e])}}else o=f.getGraphPath.apply(this,arguments);return o}function l(t){const o=[];return(this.pointArrayMap||[]).forEach(e=>{o.push(t[e])}),o}function h(){const e=this.pointArrayMap;let i,r;i=v(this),f.translate.apply(this,arguments),this.points.forEach(o=>{e.forEach((e,t)=>{r=o[e],null!==(r=this.dataModify?this.dataModify.modifyValue(r):r)&&(o[i[t]]=this.yAxis.toPixels(r,!0))})})}n.compose=function(e){const t=e.prototype;return t.linesApiNames=t.linesApiNames||L.slice(),t.pointArrayMap=t.pointArrayMap||G.slice(),t.pointValKey=t.pointValKey||"top",t.areaLinesNames=t.areaLinesNames||M.slice(),t.drawGraph=a,t.getGraphPath=p,t.toYData=l,t.translate=h,e}}const c=e;n=b().seriesTypes.sma;const{correctFloat:C,extend:d,merge:u}=s();class y extends n{init(){b().seriesTypes.sma.prototype.init.apply(this,arguments),this.options=u({topLine:{styles:{lineColor:this.color}},bottomLine:{styles:{lineColor:this.color}}},this.options)}getValues(e,t){const o=t.period,i=t.periodATR,r=t.multiplierATR,s=t.index,n=e.yData,a=n?n.length:0,p=[],l=b().seriesTypes.ema.prototype.getValues(e,{period:o,index:s}),h=b().seriesTypes.atr.prototype.getValues(e,{period:i}),c=[],d=[];let u,y,f,m,g,x,A;if(!(a<o)){for(A=o;A<=a;A++)g=l.values[A-o],x=h.values[A-i],m=g[0],y=C(g[1]+r*x[1]),f=C(g[1]-r*x[1]),u=g[1],p.push([m,y,u,f]),c.push(m),d.push([y,u,f]);return{values:p,xData:c,yData:d}}}}y.defaultOptions=u(n.defaultOptions,{params:{index:0,period:20,periodATR:10,multiplierATR:2},bottomLine:{styles:{lineWidth:1,lineColor:void 0}},topLine:{styles:{lineWidth:1,lineColor:void 0}},tooltip:{pointFormat:'<span style="color:{point.color}">‚óè</span><b> {series.name}</b><br/>Upper Channel: {point.top}<br/>EMA({series.options.params.period}): {point.middle}<br/>Lower Channel: {point.bottom}<br/>'},marker:{enabled:!1},dataGrouping:{approximation:"averages"},lineWidth:1}),d(y.prototype,{nameBase:"Keltner Channels",areaLinesNames:["top","bottom"],nameComponents:["period","periodATR","multiplierATR"],linesApiNames:["topLine","bottomLine"],pointArrayMap:["top","middle","bottom"],pointValKey:"middle"}),c.compose(y),b().registerSeriesType("keltnerchannels",y);const T=s();return t.default})());