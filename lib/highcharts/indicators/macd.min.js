!function(e,s){"object"==typeof exports&&"object"==typeof module?module.exports=s(e._Highcharts,e._Highcharts.SeriesRegistry):"function"==typeof define&&define.amd?define("highcharts/indicators/macd",["highcharts/highcharts"],function(e){return s(e,e.SeriesRegistry)}):"object"==typeof exports?exports["highcharts/indicators/macd"]=s(e._Highcharts,e._Highcharts.SeriesRegistry):e.Highcharts=s(e.Highcharts,e.Highcharts.SeriesRegistry)}("undefined"==typeof window?this:window,(u,m)=>(()=>{"use strict";var o={512:e=>{e.exports=m},944:e=>{e.exports=u}},t={};function i(e){var s=t[e];if(void 0!==s)return s.exports;s=t[e]={exports:{}};return o[e](s,s.exports,i),s.exports}i.n=e=>{var s=e&&e.__esModule?()=>e.default:()=>e;return i.d(s,{a:s}),s},i.d=(e,s)=>{for(var o in s)i.o(s,o)&&!i.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:s[o]})},i.o=(e,s)=>Object.prototype.hasOwnProperty.call(e,s);var e={},s=(i.d(e,{default:()=>y}),i(944)),n=i.n(s),s=i(512),d=i.n(s);let r=n()["noop"],a=d().seriesTypes["sma"],{extend:l,correctFloat:c,defined:g,merge:p}=n();class h extends a{init(){d().seriesTypes.sma.prototype.init.apply(this,arguments);var e=this.color;this.options&&(g(this.colorIndex)&&(this.options.signalLine&&this.options.signalLine.styles&&!this.options.signalLine.styles.lineColor&&(this.options.colorIndex=this.colorIndex+1,this.getCyclic("color",void 0,this.chart.options.colors),this.options.signalLine.styles.lineColor=this.color),this.options.macdLine&&this.options.macdLine.styles&&!this.options.macdLine.styles.lineColor&&(this.options.colorIndex=this.colorIndex+1,this.getCyclic("color",void 0,this.chart.options.colors),this.options.macdLine.styles.lineColor=this.color)),this.macdZones={zones:this.options.macdLine.zones,startIndex:0},this.signalZones={zones:this.macdZones.zones.concat(this.options.signalLine.zones),startIndex:this.macdZones.zones.length}),this.color=e}toYData(e){return[e.y,e.signal,e.MACD]}translate(){let t=this,i=["plotSignal","plotMACD"];n().seriesTypes.column.prototype.translate.apply(t),t.points.forEach(function(o){[o.signal,o.MACD].forEach(function(e,s){null!==e&&(o[i[s]]=t.yAxis.toPixels(e,!0))})})}destroy(){this.graph=null,this.graphmacd=this.graphmacd&&this.graphmacd.destroy(),this.graphsignal=this.graphsignal&&this.graphsignal.destroy(),d().seriesTypes.sma.prototype.destroy.apply(this,arguments)}drawGraph(){let o=this,e=o.points,t=o.options,s=o.zones,i={options:{gapSize:t.gapSize}},n=[[],[]],r,a=e.length;for(;a--;)g((r=e[a]).plotMACD)&&n[0].push({plotX:r.plotX,plotY:r.plotMACD,isNull:!g(r.plotMACD)}),g(r.plotSignal)&&n[1].push({plotX:r.plotX,plotY:r.plotSignal,isNull:!g(r.plotMACD)});["macd","signal"].forEach((e,s)=>{o.points=n[s],o.options=p(t[e+"Line"]?.styles||{},i),o.graph=o["graph"+e],o.zones=(o[e+"Zones"].zones||[]).slice(o[e+"Zones"].startIndex||0),d().seriesTypes.sma.prototype.drawGraph.call(o),o["graph"+e]=o.graph}),o.points=e,o.options=t,o.zones=s}applyZones(){var e=this.zones;this.zones=this.signalZones.zones,d().seriesTypes.sma.prototype.applyZones.call(this),this.graphmacd&&this.options.macdLine.zones.length&&this.graphmacd.hide(),this.zones=e}getValues(e,s){let o=s.longPeriod-s.shortPeriod,t=[],i=[],n=[],r,a,l,p=0,h;if(!(e.xData.length<s.longPeriod+s.signalPeriod)){for(l=0,r=d().seriesTypes.ema.prototype.getValues(e,{period:s.shortPeriod,index:s.index}),a=d().seriesTypes.ema.prototype.getValues(e,{period:s.longPeriod,index:s.index}),r=r.values,a=a.values;l<=r.length;l++)g(a[l])&&g(a[l][1])&&g(r[l+o])&&g(r[l+o][0])&&t.push([r[l+o][0],0,null,r[l+o][1]-a[l][1]]);for(l=0;l<t.length;l++)i.push(t[l][0]),n.push([0,null,t[l][3]]);for(l=0,h=d().seriesTypes.ema.prototype.getValues({xData:i,yData:n},{period:s.signalPeriod,index:2}).values;l<t.length;l++)t[l][0]>=h[0][0]&&(t[l][2]=h[p][1],n[l]=[0,h[p][1],t[l][3]],null===t[l][3]?(t[l][1]=0,n[l][0]=0):(t[l][1]=c(t[l][3]-h[p][1]),n[l][0]=c(t[l][3]-h[p][1])),p++);return{values:t,xData:i,yData:n}}}}h.defaultOptions=p(a.defaultOptions,{params:{shortPeriod:12,longPeriod:26,signalPeriod:9,period:26},signalLine:{zones:[],styles:{lineWidth:1,lineColor:void 0}},macdLine:{zones:[],styles:{lineWidth:1,lineColor:void 0}},threshold:0,groupPadding:.1,pointPadding:.1,crisp:!1,states:{hover:{halo:{size:0}}},tooltip:{pointFormat:'<span style="color:{point.color}">‚óè</span> <b> {series.name}</b><br/>Value: {point.MACD}<br/>Signal: {point.signal}<br/>Histogram: {point.y}<br/>'},dataGrouping:{approximation:"averages"},minPointLength:0}),l(h.prototype,{nameComponents:["longPeriod","shortPeriod","signalPeriod"],pointArrayMap:["y","signal","MACD"],parallelArrays:["x","y","signal","MACD"],pointValKey:"y",markerAttribs:r,getColumnMetrics:n().seriesTypes.column.prototype.getColumnMetrics,crispCol:n().seriesTypes.column.prototype.crispCol,drawPoints:n().seriesTypes.column.prototype.drawPoints}),d().registerSeriesType("macd",h);let y=n();return e.default})());