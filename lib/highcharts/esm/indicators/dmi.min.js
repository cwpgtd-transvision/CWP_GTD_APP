import*as t from"../highcharts.js";import"../modules/stock.js";var e,a={n:t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return a.d(e,{a:e}),e},d:(t,e)=>{for(var s in e)a.o(e,s)&&!a.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};let s=t.default;var i=a.n(s);a.d({},{});let l=t.default.SeriesRegistry;var o=a.n(l);let{prototype:r}=o().seriesTypes["sma"],{defined:n,error:p,merge:h}=i(),u=(!function(t){let a=["bottomLine"],s=["top","bottom"],i=["top"];function M(t){return"plot"+t.charAt(0).toUpperCase()+t.slice(1)}function x(t,e){let a=[];return(t.pointArrayMap||[]).forEach(t=>{t!==e&&a.push(M(t))}),a}function l(){let a=this,t=a.pointValKey,e=a.linesApiNames,s=a.areaLinesNames,i=a.points,l=a.options,o=a.graph,u={options:{gapSize:l.gapSize}},c=[],m=x(a,t),y=i.length,f;var d,D,g;m.forEach((t,e)=>{for(c[e]=[];y--;)f=i[y],c[e].push({x:f.x,plotX:f.plotX,plotY:f[t],isNull:!n(f[t])});y=i.length}),a.userOptions.fillColor&&s.length&&(d=c[m.indexOf(M(s[0]))],D=1===s.length?i:c[m.indexOf(M(s[1]))],g=a.color,a.points=D,a.nextPoints=d,a.color=a.userOptions.fillColor,a.options=h(i,u),a.graph=a.area,a.fillGraph=!0,r.drawGraph.call(a),a.area=a.graph,delete a.nextPoints,delete a.fillGraph,a.color=g),e.forEach((t,e)=>{c[e]?(a.points=c[e],l[t]?a.options=h(l[t].styles,u):p('Error: "There is no '+t+' in DOCS options declared. Check if linesApiNames are consistent with your DOCS line names."'),a.graph=a["graph"+t],r.drawGraph.call(a),a["graph"+t]=a.graph):p('Error: "'+t+" doesn't have equivalent in pointArrayMap. To many elements in linesApiNames relative to pointArrayMap.\"")}),a.points=i,a.options=l,a.graph=o,r.drawGraph.call(a)}function o(t){let e,a=[],s;if(t=t||this.points,this.fillGraph&&this.nextPoints){if((e=r.getGraphPath.call(this,this.nextPoints))&&e.length){e[0][0]="L",a=r.getGraphPath.call(this,t);for(let t=(s=e.slice(0,a.length)).length-1;0<=t;t--)a.push(s[t])}}else a=r.getGraphPath.apply(this,arguments);return a}function u(e){let a=[];return(this.pointArrayMap||[]).forEach(t=>{a.push(e[t])}),a}function c(){let t=this.pointArrayMap,s,i;s=x(this),r.translate.apply(this,arguments),this.points.forEach(a=>{t.forEach((t,e)=>{i=a[t],null!==(i=this.dataModify?this.dataModify.modifyValue(i):i)&&(a[s[e]]=this.yAxis.toPixels(i,!0))})})}t.compose=function(t){let e=t.prototype;return e.linesApiNames=e.linesApiNames||a.slice(),e.pointArrayMap=e.pointArrayMap||s.slice(),e.pointValKey=e.pointValKey||"top",e.areaLinesNames=e.areaLinesNames||i.slice(),e.drawGraph=l,e.getGraphPath=o,e.toYData=u,e.translate=c,t}}(e=e||{}),e),c=o().seriesTypes["sma"],{correctFloat:m,extend:y,isArray:f,merge:d}=i();class D extends c{calculateDM(t,e,a){var s=t[e][1],i=t[e][2],r=t[e-1][1],t=t[e-1][2];return m(t-i<s-r?a?Math.max(s-r,0):0:a?0:Math.max(t-i,0))}calculateDI(t,e){return t/e*100}calculateDX(t,e){return m(Math.abs(t-e)/Math.abs(t+e)*100)}smoothValues(t,e,a){return m(t-t/a+e)}getTR(t,e){return m(Math.max(t[1]-t[2],e?Math.abs(t[1]-e[3]):0,e?Math.abs(t[2]-e[3]):0))}getValues(t,e){let m=e.period,y=t.xData,d=t.yData,a=d?d.length:0,D=[],g=[],M=[];if(!(y.length<=m)&&f(d[0])&&4===d[0].length){let p=0,h=0,u=0,c;for(c=1;c<a;c++){let t,e,a,s,i,r,l,o,n;c<=m?(s=this.calculateDM(d,c,!0),i=this.calculateDM(d,c),r=this.getTR(d[c],d[c-1]),p+=s,h+=i,u+=r,c===m&&(l=this.calculateDI(p,u),o=this.calculateDI(h,u),n=this.calculateDX(p,h),D.push([y[c],n,l,o]),g.push(y[c]),M.push([n,l,o]))):(s=this.calculateDM(d,c,!0),i=this.calculateDM(d,c),r=this.getTR(d[c],d[c-1]),t=this.smoothValues(p,s,m),e=this.smoothValues(h,i,m),a=this.smoothValues(u,r,m),p=t,h=e,u=a,l=this.calculateDI(p,u),o=this.calculateDI(h,u),n=this.calculateDX(p,h),D.push([y[c],n,l,o]),g.push(y[c]),M.push([n,l,o]))}return{values:D,xData:g,yData:M}}}}D.defaultOptions=d(c.defaultOptions,{params:{index:void 0},marker:{enabled:!1},tooltip:{pointFormat:'<span style="color: {point.color}">‚óè</span><b> {series.name}</b><br/><span style="color: {point.color}">DX</span>: {point.y}<br/><span style="color: {point.series.options.plusDILine.styles.lineColor}">+DI</span>: {point.plusDI}<br/><span style="color: {point.series.options.minusDILine.styles.lineColor}">-DI</span>: {point.minusDI}<br/>'},plusDILine:{styles:{lineWidth:1,lineColor:"#06b535"}},minusDILine:{styles:{lineWidth:1,lineColor:"#f21313"}},dataGrouping:{approximation:"averages"}}),y(D.prototype,{areaLinesNames:[],nameBase:"DMI",linesApiNames:["plusDILine","minusDILine"],pointArrayMap:["y","plusDI","minusDI"],parallelArrays:["x","y","plusDI","minusDI"],pointValKey:"y"}),u.compose(D),o().registerSeriesType("dmi",D);let g=i();export{g as default};