import*as e from"../highcharts.js";import"../modules/stock.js";var t={n:e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return t.d(r,{a:r}),r},d:(e,r)=>{for(var s in r)t.o(r,s)&&!t.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:r[s]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};let s=e.default;var r=t.n(s);t.d({},{});let n=e.default.SeriesRegistry;var a=t.n(n);let i=a().seriesTypes["sma"],{isArray:o,extend:l,merge:p}=r();class g extends i{getRegressionLineParameters(e,t){function r(e,t){return o(e)?e[t]:e}let s=this.options.params.index,n=e.reduce(function(e,t){return t+e},0),a=t.reduce(function(e,t){return r(t,s)+e},0),i=n/e.length,l=a/t.length,p,g,u=0,d=0;for(g=0;g<e.length;g++)u+=(p=e[g]-i)*(r(t[g],s)-l),d+=Math.pow(p,2);var c=d?u/d:0;return{slope:c,intercept:l-c*i}}getEndPointY(e,t){return e.slope*t+e.intercept}transformXData(e,t){let r=e[0];return e.map(function(e){return(e-r)/t})}findClosestDistance(e){let t,r,s;for(s=1;s<e.length-1;s++)0<(t=e[s]-e[s-1])&&(void 0===r||t<r)&&(r=t);return r}getValues(e,t){let r,s,n,a,i,l,p,g,u,d=e.xData,c=e.yData,f=t.period,m={xData:[],yData:[],values:[]},y=this.options.params.xAxisUnit||this.findClosestDistance(d);for(s=f-1;s<=d.length-1;s++)n=s-f+1,a=s+1,i=d[s],p=d.slice(n,a),g=c.slice(n,a),u=this.transformXData(p,y),r=this.getRegressionLineParameters(u,g),l=this.getEndPointY(r,u[u.length-1]),m.values.push({regressionLineParameters:r,x:i,y:l}),o(m.xData)&&m.xData.push(i),o(m.yData)&&m.yData.push(l);return m}}g.defaultOptions=p(i.defaultOptions,{params:{xAxisUnit:null},tooltip:{valueDecimals:4}}),l(g.prototype,{nameBase:"Linear Regression Indicator"}),a().registerSeriesType("linearRegression",g);let u=a().seriesTypes["linearRegression"],{extend:d,merge:c}=r();class f extends u{getEndPointY(e){return e.slope}}f.defaultOptions=c(u.defaultOptions),d(f.prototype,{nameBase:"Linear Regression Slope Indicator"}),a().registerSeriesType("linearRegressionSlope",f);let m=a().seriesTypes["linearRegression"],{extend:h,merge:y}=r();class x extends m{getEndPointY(e){return e.intercept}}x.defaultOptions=y(m.defaultOptions),h(x.prototype,{nameBase:"Linear Regression Intercept Indicator"}),a().registerSeriesType("linearRegressionIntercept",x);let R=a().seriesTypes["linearRegression"],{extend:D,merge:O}=r();class P extends R{slopeToAngle(e){return 180/Math.PI*Math.atan(e)}getEndPointY(e){return this.slopeToAngle(e.slope)}}P.defaultOptions=O(R.defaultOptions,{tooltip:{pointFormat:'<span style="color:{point.color}">●</span>{series.name}: <b>{point.y}°</b><br/>'}}),D(P.prototype,{nameBase:"Linear Regression Angle Indicator"}),a().registerSeriesType("linearRegressionAngle",P);let T=r();export{T as default};