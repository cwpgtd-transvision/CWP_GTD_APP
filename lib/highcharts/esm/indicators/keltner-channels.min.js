import*as e from"../highcharts.js";import"../modules/stock.js";var t,o={n:e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},d:(e,t)=>{for(var i in t)o.o(t,i)&&!o.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};let i=e.default;var r=o.n(i);o.d({},{});let a=e.default.SeriesRegistry;var s=o.n(a);let{prototype:n}=s().seriesTypes["sma"],{defined:p,error:l,merge:h}=r(),d=(!function(e){let o=["bottomLine"],i=["top","bottom"],r=["top"];function b(e){return"plot"+e.charAt(0).toUpperCase()+e.slice(1)}function x(e,t){let o=[];return(e.pointArrayMap||[]).forEach(e=>{e!==t&&o.push(b(e))}),o}function a(){let o=this,e=o.pointValKey,t=o.linesApiNames,i=o.areaLinesNames,r=o.points,a=o.options,s=o.graph,d={options:{gapSize:a.gapSize}},m=[],u=x(o,e),c=r.length,y;var f,g,A;u.forEach((e,t)=>{for(m[t]=[];c--;)y=r[c],m[t].push({x:y.x,plotX:y.plotX,plotY:y[e],isNull:!p(y[e])});c=r.length}),o.userOptions.fillColor&&i.length&&(f=m[u.indexOf(b(i[0]))],g=1===i.length?r:m[u.indexOf(b(i[1]))],A=o.color,o.points=g,o.nextPoints=f,o.color=o.userOptions.fillColor,o.options=h(r,d),o.graph=o.area,o.fillGraph=!0,n.drawGraph.call(o),o.area=o.graph,delete o.nextPoints,delete o.fillGraph,o.color=A),t.forEach((e,t)=>{m[t]?(o.points=m[t],a[e]?o.options=h(a[e].styles,d):l('Error: "There is no '+e+' in DOCS options declared. Check if linesApiNames are consistent with your DOCS line names."'),o.graph=o["graph"+e],n.drawGraph.call(o),o["graph"+e]=o.graph):l('Error: "'+e+" doesn't have equivalent in pointArrayMap. To many elements in linesApiNames relative to pointArrayMap.\"")}),o.points=r,o.options=a,o.graph=s,n.drawGraph.call(o)}function s(e){let t,o=[],i;if(e=e||this.points,this.fillGraph&&this.nextPoints){if((t=n.getGraphPath.call(this,this.nextPoints))&&t.length){t[0][0]="L",o=n.getGraphPath.call(this,e);for(let e=(i=t.slice(0,o.length)).length-1;0<=e;e--)o.push(i[e])}}else o=n.getGraphPath.apply(this,arguments);return o}function d(t){let o=[];return(this.pointArrayMap||[]).forEach(e=>{o.push(t[e])}),o}function m(){let e=this.pointArrayMap,i,r;i=x(this),n.translate.apply(this,arguments),this.points.forEach(o=>{e.forEach((e,t)=>{r=o[e],null!==(r=this.dataModify?this.dataModify.modifyValue(r):r)&&(o[i[t]]=this.yAxis.toPixels(r,!0))})})}e.compose=function(e){let t=e.prototype;return t.linesApiNames=t.linesApiNames||o.slice(),t.pointArrayMap=t.pointArrayMap||i.slice(),t.pointValKey=t.pointValKey||"top",t.areaLinesNames=t.areaLinesNames||r.slice(),t.drawGraph=a,t.getGraphPath=s,t.toYData=d,t.translate=m,e}}(t=t||{}),t),m=s().seriesTypes["sma"],{correctFloat:c,extend:u,merge:y}=r();class f extends m{init(){s().seriesTypes.sma.prototype.init.apply(this,arguments),this.options=y({topLine:{styles:{lineColor:this.color}},bottomLine:{styles:{lineColor:this.color}}},this.options)}getValues(e,t){let o,i,r,a,n,p,l,h=t.period,d=t.periodATR,m=t.multiplierATR,u=t.index,y=e.yData,f=y?y.length:0,g=[],A=s().seriesTypes.ema.prototype.getValues(e,{period:h,index:u}),b=s().seriesTypes.atr.prototype.getValues(e,{period:d}),x=[],v=[];if(!(f<h)){for(l=h;l<=f;l++)n=A.values[l-h],p=b.values[l-d],a=n[0],i=c(n[1]+m*p[1]),r=c(n[1]-m*p[1]),o=n[1],g.push([a,i,o,r]),x.push(a),v.push([i,o,r]);return{values:g,xData:x,yData:v}}}}f.defaultOptions=y(m.defaultOptions,{params:{index:0,period:20,periodATR:10,multiplierATR:2},bottomLine:{styles:{lineWidth:1,lineColor:void 0}},topLine:{styles:{lineWidth:1,lineColor:void 0}},tooltip:{pointFormat:'<span style="color:{point.color}">‚óè</span><b> {series.name}</b><br/>Upper Channel: {point.top}<br/>EMA({series.options.params.period}): {point.middle}<br/>Lower Channel: {point.bottom}<br/>'},marker:{enabled:!1},dataGrouping:{approximation:"averages"},lineWidth:1}),u(f.prototype,{nameBase:"Keltner Channels",areaLinesNames:["top","bottom"],nameComponents:["period","periodATR","multiplierATR"],linesApiNames:["topLine","bottomLine"],pointArrayMap:["top","middle","bottom"],pointValKey:"middle"}),d.compose(f),s().registerSeriesType("keltnerchannels",f);let g=r();export{g as default};