import*as __WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__ from"../highcharts.src.js";var __webpack_require__={n:t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return __webpack_require__.d(e,{a:e}),e},d:(t,e)=>{for(var i in e)__webpack_require__.o(e,i)&&!__webpack_require__.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};const external_highcharts_src_js_default_namespaceObject=__WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__.default;var external_highcharts_src_js_default_default=__webpack_require__.n(external_highcharts_src_js_default_namespaceObject);const external_highcharts_src_js_default_SeriesRegistry_namespaceObject=__WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__.default.SeriesRegistry;var external_highcharts_src_js_default_SeriesRegistry_default=__webpack_require__.n(external_highcharts_src_js_default_SeriesRegistry_namespaceObject);const{mapline:{prototype:{pointClass:MapLinePoint}}}=external_highcharts_src_js_default_SeriesRegistry_default()["seriesTypes"],{pick,isString,isNumber}=external_highcharts_src_js_default_default();class FlowMapPoint extends MapLinePoint{isValid(){let e=!(!this.options.to||!this.options.from);return[this.options.to,this.options.from].forEach(function(t){e=!!(e&&t&&(isString(t)||isNumber(pick(t[0],t.lat))&&isNumber(pick(t[1],t.lon))))}),e}}const FlowMap_FlowMapPoint=FlowMapPoint,{series:{prototype:{pointClass:Point}},seriesTypes:{column:ColumnSeries,map:MapSeries,mapline:MapLineSeries}}=external_highcharts_src_js_default_SeriesRegistry_default(),{addEvent,arrayMax,arrayMin,defined,extend,isArray,merge,pick:FlowMapSeries_pick,relativeLength}=external_highcharts_src_js_default_default();class FlowMapSeries extends MapLineSeries{static getLength(t,e){return Math.sqrt(t*t+e*e)}static normalize(t,e){var i=this.getLength(t,e);return[t/i,e/i]}static markerEndPath(t,e,i,s){var r,o,a=relativeLength(s.width||0,this.getLength(e[0]-t[0],e[1]-t[1])),s=s.markerType||"arrow",[n,p]=this.normalize(e[0]-t[0],e[1]-t[1]);const h=[];return"arrow"===s&&([r,o]=t,r-=n*a,o-=p*a,h.push(["L",r,o]),h.push(["L",i[0],i[1]]),[r,o]=e,r+=n*a,o+=p*a,h.push(["L",r,o])),"mushroom"===s&&([r,o]=t,[s,t]=e,[e,i]=i,e=2*(e-(e=(s-r)/2+r))+e,i=2*(i-(i=(t-o)/2+o))+i,r-=n*a,o-=p*a,h.push(["L",r,o]),s+=n*a,t+=p*a,h.push(["Q",e,i,s,t])),h}animate(t){const e=this.points;t||e.forEach(t=>{if(t.shapeArgs&&isArray(t.shapeArgs.d)&&t.shapeArgs.d.length){var i=t.shapeArgs.d,s=i[0][1],r=i[0][2];if(s&&r){const o=[];for(let e=0;e<i.length;e++){o.push([...i[e]]);for(let t=1;t<i[e].length;t++)o[e][t]=t%2?s:r}t.graphic&&(t.graphic.attr({d:o}),t.graphic.animate({d:i}))}}})}getLinkWidth(t){var e=this.options.width,i=t.options.weight||this.options.weight;if(t.options.weight=i,e&&!i)return e;t=this.smallestWeight,e=this.greatestWeight;if(!defined(i)||!t||!e)return 0;var s=this.options.minWidth;return(i-t)*(this.options.maxWidth-s)/(e-t||1)+s}autoCurve(t,e,i,s,r,o){const a=i-t,n=s-e,p=(i-t)/2+t,h=(s-e)/2+e,l=p-r,_=h-o;i=a*l+n*_,t=a*_-n*l;let c=Math.atan2(t,i),d=180*c/Math.PI;return c=(d=d<0?360+d:d)*Math.PI/180,.7*-Math.sin(c)}pointAttribs(t,e){const i=MapSeries.prototype.pointAttribs.call(this,t,e);return i.fill=FlowMapSeries_pick(t.options.fillColor,t.options.color,"none"===this.options.fillColor?null:this.options.fillColor,this.color),i["fill-opacity"]=FlowMapSeries_pick(t.options.fillOpacity,this.options.fillOpacity),i["stroke-width"]=FlowMapSeries_pick(t.options.lineWidth,this.options.lineWidth,1),t.options.opacity&&(i.opacity=t.options.opacity),i}translate(){!this.chart.hasRendered||!this.isDirtyData&&this.hasRendered||(this.processData(),this.generatePoints());const h=[];let l=0,_=0;this.points.forEach(t=>{const e=this.chart,i=e.mapView,s=t.options,r=()=>{t.series.isDirty=!0},o=t=>{t=e.get(t);if(t instanceof Point&&t.plotX&&t.plotY)return addEvent(t,"update",r),{x:t.plotX,y:t.plotY}},a=t=>isArray(t)?{lon:t[0],lat:t[1]}:t;let n,p;"string"==typeof s.from?n=o(s.from):"object"==typeof s.from&&i&&(n=i.lonLatToPixels(a(s.from))),"string"==typeof s.to?p=o(s.to):"object"==typeof s.to&&i&&(p=i.lonLatToPixels(a(s.to))),t.fromPos=n,t.toPos=p,n&&p&&(l+=(n.x+p.x)/2,_+=(n.y+p.y)/2),FlowMapSeries_pick(t.options.weight,this.options.weight)&&h.push(FlowMapSeries_pick(t.options.weight,this.options.weight))}),this.smallestWeight=arrayMin(h),this.greatestWeight=arrayMax(h),this.centerOfPoints={x:l/this.points.length,y:_/this.points.length},this.points.forEach(t=>{this.getLinkWidth(t)?(t.fromPos&&(t.plotX=t.fromPos.x,t.plotY=t.fromPos.y),t.shapeType="path",t.shapeArgs=this.getPointShapeArgs(t),t.color=FlowMapSeries_pick(t.options.color,t.series.color)):t.shapeArgs={d:[]}})}getPointShapeArgs(t){var{fromPos:e,toPos:i}=t;if(!e||!i)return{};var s=this.getLinkWidth(t)/2,r=t.options,o=merge(this.options.markerEnd,r.markerEnd),a=FlowMapSeries_pick(r.growTowards,this.options.growTowards),n=e.x||0,e=e.y||0;let p=i.x||0,h=i.y||0,l=FlowMapSeries_pick(r.curveFactor,this.options.curveFactor),_=o&&o.enabled&&o.height||0;if(defined(l)||(l=this.autoCurve(n,e,p,h,this.centerOfPoints.x,this.centerOfPoints.y)),_){_=relativeLength(_,4*s);var r=p-n,c=h-e;const d=n+(r*=.5),g=e+(c*=.5),f=r,y=(r=c,c=-f,d+r*l),M=g+c*l;var[r,c]=FlowMapSeries.normalize(y-p,M-h);r*=_,c*=_,p+=r,h+=c}r=p-n,c=h-e;const d=n+(r*=.5),g=e+(c*=.5);let f=r,[u,m]=(r=c,c=-f,FlowMapSeries.normalize(r,c));var w=1+.25*Math.sqrt(l*l);u*=s*w,m*=s*w;const y=d+r*l,M=g+c*l;let[S,P]=FlowMapSeries.normalize(y-n,M-e);f=S,S=P,P=-f,S*=s,P*=s;var[w,r]=FlowMapSeries.normalize(y-p,M-h);f=w,w=-r,r=f,w*=s,r*=s,a&&(S/=s,P/=s,u/=4,m/=4);const x={d:[["M",n-S,e-P],["Q",y-u,M-m,p-w,h-r],["L",p+w,h+r],["Q",y+u,M+m,n+S,e+P],["Z"]]};o&&o.enabled&&x.d&&(c=FlowMapSeries.markerEndPath([p-w,h-r],[p+w,h+r],[i.x,i.y],o),x.d.splice(2,0,...c));a=t.options.from,s=t.options.to,n=a.lat,e=a.lon,w=s.lat,r=s.lon;return n&&e&&(t.options.from=+n+", "+ +e),w&&r&&(t.options.to=+w+", "+ +r),x}}FlowMapSeries.defaultOptions=merge(MapLineSeries.defaultOptions,{animation:!0,dataLabels:{enabled:!1},fillOpacity:.5,markerEnd:{enabled:!0,height:"40%",width:"40%",markerType:"arrow"},width:1,maxWidth:25,minWidth:5,lineWidth:void 0,tooltip:{headerFormat:'<span style="font-size: 0.8em">{series.name}</span><br/>',pointFormat:"{point.options.from} â†’ {point.options.to}: <b>{point.options.weight}</b>"}}),extend(FlowMapSeries.prototype,{pointClass:FlowMap_FlowMapPoint,pointArrayMap:["from","to","weight"],drawPoints:ColumnSeries.prototype.drawPoints,dataColumnKeys:ColumnSeries.prototype.dataColumnKeys,useMapGeometry:!0}),external_highcharts_src_js_default_SeriesRegistry_default().registerSeriesType("flowmap",FlowMapSeries);const FlowMap_FlowMapSeries=null,flowmap_src=external_highcharts_src_js_default_default();export{flowmap_src as default};