import*as __WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__ from"../highcharts.src.js";var __webpack_require__={n:e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return __webpack_require__.d(t,{a:t}),t},d:(e,t)=>{for(var r in t)__webpack_require__.o(t,r)&&!__webpack_require__.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};const external_highcharts_src_js_default_namespaceObject=__WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__.default;var external_highcharts_src_js_default_default=__webpack_require__.n(external_highcharts_src_js_default_namespaceObject);const external_highcharts_src_js_default_Color_namespaceObject=__WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__.default.Color;var GeometryUtilities,CircleUtilities,external_highcharts_src_js_default_Color_default=__webpack_require__.n(external_highcharts_src_js_default_Color_namespaceObject);!function(e){e.getCenterOfPoints=function(e){var t=e.reduce((e,t)=>(e.x+=t.x,e.y+=t.y,e),{x:0,y:0});return{x:t.x/e.length,y:t.y/e.length}},e.getDistanceBetweenPoints=function(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))},e.getAngleBetweenPoints=function(e,t){return Math.atan2(t.x-e.x,t.y-e.y)},e.pointInPolygon=function({x:e,y:t},r){var n=r.length;let i,s,a=!1;for(i=0,s=n-1;i<n;s=i++){var[o,l]=r[i],[c,u]=r[s];t<l!=t<u&&e<(c-o)*(t-l)/(u-l)+o&&(a=!a)}return a}}(GeometryUtilities=GeometryUtilities||{});const Geometry_GeometryUtilities=GeometryUtilities,{getAngleBetweenPoints,getCenterOfPoints,getDistanceBetweenPoints}=Geometry_GeometryUtilities,Geometry_CircleUtilities=(!function(e){function c(e,t){t=Math.pow(10,t);return Math.round(e*t)/t}function s(e){if(e<=0)throw new Error("radius of circle must be a positive number.");return Math.PI*e*e}function a(e,t){return e*e*Math.acos(1-t/e)-(e-t)*Math.sqrt(t*(2*e-t))}function o(e,t){var r,n,i,s=getDistanceBetweenPoints(e,t),a=e.r,o=t.r;let l=[];return s<a+o&&s>Math.abs(a-o)&&(o=((a=a*a)-o*o+s*s)/(2*s),a=Math.sqrt(a-o*o),i=(r=e.x)+o*((n=t.x)-r)/s,t=(e=e.y)+o*((o=t.y)-e)/s,o=a/s*-(o-e),e=a/s*-(n-r),l=[{x:c(i+o,14),y:c(t-e,14)},{x:c(i-o,14),y:c(t+e,14)}]),l}function r(e){return e.reduce((e,i,s,t)=>{t=t.slice(s+1).reduce((e,t,r)=>{const n=[s,r+s+1];return e.concat(o(i,t).map(e=>(e.indexes=n,e)))},[]);return e.concat(t)},[])}function n(e,t){return getDistanceBetweenPoints(e,t)<=t.r+1e-10}function i(t,e){return!e.some(function(e){return!n(t,e)})}function u(t){return r(t).filter(function(e){return i(e,t)})}e.round=c,e.getAreaOfCircle=s,e.getCircularSegmentArea=a,e.getOverlapBetweenCircles=function(e,t,r){let n=0;var i;return n=r<e+t?c(n=r<=Math.abs(t-e)?s(e<t?e:t):(i=r-(r=(e*e-t*t+r*r)/(2*r)),a(e,e-r)+a(t,t-i)),14):n},e.getCircleCircleIntersection=o,e.getCirclesIntersectionPoints=r,e.isCircle1CompletelyOverlappingCircle2=function(e,t){return getDistanceBetweenPoints(e,t)+t.r<e.r+1e-10},e.isPointInsideCircle=n,e.isPointInsideAllCircles=i,e.isPointOutsideAllCircles=function(t,e){return!e.some(function(e){return n(t,e)})},e.getCirclesIntersectionPolygon=u,e.getAreaOfIntersectionBetweenCircles=function(l){let e=u(l),t;if(1<e.length){const n=getCenterOfPoints(e);var r=(e=e.map(function(e){return e.angle=getAngleBetweenPoints(n,e),e}).sort(function(e,t){return t.angle-e.angle}))[e.length-1];const i=e.reduce(function(e,s){const a=e["startPoint"],o=getCenterOfPoints([a,s]);var t,r=s.indexes.filter(function(e){return-1<a.indexes.indexOf(e)}).reduce(function(e,t){var t=l[t],r=getAngleBetweenPoints(t,s),n=getAngleBetweenPoints(t,a),n=n-(n-r+(n<r?2*Math.PI:0))/2;let i=getDistanceBetweenPoints(o,{x:t.x+t.r*Math.sin(n),y:t.y+t.r*Math.cos(n)});r=t.r;return i>2*r&&(i=2*r),e=!e||e.width>i?{r:r,largeArc:i>r?1:0,width:i,x:s.x,y:s.y}:e},null);return r&&(t=r["r"],e.arcs.push(["A",t,t,0,r.largeArc,1,r.x,r.y]),e.startPoint=s),e},{startPoint:r,arcs:[]}).arcs;0!==i.length&&1!==i.length&&(i.unshift(["M",r.x,r.y]),t={center:n,d:i})}return t}}(CircleUtilities=CircleUtilities||{}),CircleUtilities);function draw(e,t){const{animatableAttribs:r,onComplete:n,css:i,renderer:s}=t;var a=e.series&&e.series.chart.hasRendered?void 0:e.series&&e.series.options.animation;let o=e.graphic;if(t.attribs={...t.attribs,class:e.getClassName()},e.shouldDraw())o||(o="text"===t.shapeType?s.text():"image"===t.shapeType?s.image(t.imageUrl||"").attr(t.shapeArgs||{}):s[t.shapeType](t.shapeArgs||{}),(e.graphic=o).add(t.group)),i&&o.css(i),o.attr(t.attribs).animate(r,!t.isNew&&a,n);else if(o){const l=()=>{e.graphic=o=o&&o.destroy(),"function"==typeof n&&n()};Object.keys(r).length?o.animate(r,void 0,()=>l()):l()}}const DrawPointUtilities={draw:draw},Series_DrawPointUtilities=DrawPointUtilities,external_highcharts_src_js_default_SeriesRegistry_namespaceObject=__WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__.default.SeriesRegistry;var external_highcharts_src_js_default_SeriesRegistry_default=__webpack_require__.n(external_highcharts_src_js_default_SeriesRegistry_namespaceObject);const{prototype:{pointClass:ScatterPoint}}=external_highcharts_src_js_default_SeriesRegistry_default().seriesTypes["scatter"],isNumber=external_highcharts_src_js_default_default()["isNumber"];class VennPoint extends ScatterPoint{isValid(){return isNumber(this.value)}shouldDraw(){return!!this.shapeArgs}}const Venn_VennPoint=VennPoint,VennSeriesDefaults={borderColor:"#cccccc",borderDashStyle:"solid",borderWidth:1,brighten:0,clip:!1,colorByPoint:!0,dataLabels:{enabled:!0,verticalAlign:"middle",formatter:function(){return this.point.name}},inactiveOtherPoints:!0,marker:!1,opacity:.75,showInLegend:!1,legendType:"point",states:{hover:{opacity:1,borderColor:"#333333"},select:{color:"#cccccc",borderColor:"#000000",animation:!1},inactive:{opacity:.075}},tooltip:{pointFormat:"{point.name}: {point.value}"},legendSymbol:"rectangle"},Venn_VennSeriesDefaults=VennSeriesDefaults,{getAreaOfCircle,getCircleCircleIntersection,getOverlapBetweenCircles:getOverlapBetweenCirclesByDistance,isPointInsideAllCircles,isPointInsideCircle,isPointOutsideAllCircles}=Geometry_CircleUtilities,VennUtils_getDistanceBetweenPoints=Geometry_GeometryUtilities["getDistanceBetweenPoints"],{extend,isArray,isNumber:VennUtils_isNumber,isObject,isString}=external_highcharts_src_js_default_default();function addOverlapToSets(e){const i={};return e.filter(e=>2===e.sets.length).forEach(n=>{n.sets.forEach((e,t,r)=>{isObject(i[e])||(i[e]={totalOverlap:0,overlapping:{}}),i[e]={totalOverlap:(i[e].totalOverlap||0)+n.value,overlapping:{...i[e].overlapping||{},[r[1-t]]:n.value}}})}),e.filter(isSet).forEach(e=>{var t=i[e.sets[0]];extend(e,t)}),e}function bisect(e,t,r,n,i){var s=e(t),a=e(r),o=i||100,l=n||1e-10;let c=r-t,u,_,d=1;if(r<=t)throw new Error("a must be smaller than b.");if(0<s*a)throw new Error("f(a) and f(b) must have opposite signs.");if(0===s)u=t;else if(0===a)u=r;else for(;d++<=o&&0!==_&&c>l;)c=(r-t)/2,u=t+c,0<s*(_=e(u))?t=u:r=u;return u}function getCentroid(e){const t=e.slice(0,-1),r=t.length,n=[],i=(e,t)=>(e.sum+=t[e.i],e);for(let e=0;e<r;e++)n[e]=t.reduce(i,{sum:0,i:e}).sum/r;return n}function getDistanceBetweenCirclesByOverlap(t,r,n){var e=t+r;let i;return i=n<=0?e:getAreaOfCircle(t<r?t:r)<=n?0:bisect(e=>{e=getOverlapBetweenCirclesByDistance(t,r,e);return n-e},0,e)}function getLabelWidth(i,s,e){const t=s.reduce((e,t)=>Math.min(t.r,e),1/0),a=e.filter(e=>!isPointInsideCircle(i,e));function r(r,n){return bisect(e=>{var t={x:i.x+n*e,y:i.y},t=isPointInsideAllCircles(t,s)&&isPointOutsideAllCircles(t,a);return-(r-e)+(t?0:Number.MAX_VALUE)},0,r)}return 2*Math.min(r(t,-1),r(t,1))}function getMarginFromCircles(r,e,t){e=e.reduce((e,t)=>{t=t.r-VennUtils_getDistanceBetweenPoints(r,t);return t<=e?t:e},Number.MAX_VALUE);return t.reduce((e,t)=>{t=VennUtils_getDistanceBetweenPoints(r,t)-t.r;return t<=e?t:e},e)}function getOverlapBetweenCircles(e){let t=0;var r;return 2===e.length&&(r=e[0],e=e[1],t=getOverlapBetweenCirclesByDistance(r.r,e.r,VennUtils_getDistanceBetweenPoints(r,e))),t}function isSet(e){return isArray(e.sets)&&1===e.sets.length}function isValidRelation(e){const r={};return isObject(e)&&VennUtils_isNumber(e.value)&&-1<e.value&&isArray(e.sets)&&0<e.sets.length&&!e.sets.some(function(e){let t=!1;return!r[e]&&isString(e)?r[e]=!0:t=!0,t})}function isValidSet(e){return isValidRelation(e)&&isSet(e)&&0<e.value}function layoutGreedyVenn(e){const _=[],d={};e.filter(e=>1===e.sets.length).forEach(e=>{d[e.sets[0]]=e.circle={x:Number.MAX_VALUE,y:Number.MAX_VALUE,r:Math.sqrt(e.value/Math.PI)}});var t=(e,t)=>{const r=e.circle;r&&(r.x=t.x,r.y=t.y),_.push(e)};addOverlapToSets(e);const r=e.filter(isSet).sort(sortByTotalOverlap),f=(t(r.shift(),{x:0,y:0}),e.filter(e=>2===e.sets.length));for(const i of r){const h=i.circle;if(h){const g=h.r,p=i.overlapping;var n=_.reduce((e,t,r)=>{var n=t.circle;if(!n||!p)return e;var t=p[t.sets[0]],i=getDistanceBetweenCirclesByOverlap(g,n.r,t);let s=[{x:n.x+i,y:n.y},{x:n.x-i,y:n.y},{x:n.x,y:n.y+i},{x:n.x,y:n.y-i}];for(const c of _.slice(r+1)){var a=c.circle,o=p[c.sets[0]];a&&(o=getDistanceBetweenCirclesByOverlap(g,a.r,o),s=s.concat(getCircleCircleIntersection({x:n.x,y:n.y,r:i},{x:a.x,y:a.y,r:o})))}for(const u of s){h.x=u.x,h.y=u.y;var l=loss(d,f);l<e.loss&&(e.loss=l,e.coordinates=u)}return e},{loss:Number.MAX_VALUE,coordinates:void 0});t(i,n.coordinates)}}return d}function loss(n,e){return e.reduce(function(e,t){let r=0;return 1<t.sets.length&&(t=t.value-getOverlapBetweenCircles(t.sets.map(function(e){return n[e]})),r=Math.round(t*t*1e11)/1e11),e+r},0)}function nelderMead(s,e){function t(e,t){return e.fx-t.fx}const a=(r,e,n,i)=>e.map((e,t)=>r*e+n*i[t]);var r=(e,t)=>(t.fx=s(t),e[e.length-1]=t,e),n=e=>{const r=e[0];return e.map(e=>{const t=a(.5,r,.5,e);return t.fx=s(t),t})},i=(e,t,r,n)=>{const i=a(r,e,n,t);return i.fx=s(i),i};let o=(t=>{const r=t.length,n=new Array(r+1);n[0]=t,n[0].fx=s(t);for(let e=0;e<r;++e){const i=t.slice();i[e]=i[e]?1.05*i[e]:.001,i.fx=s(i),n[e+1]=i}return n})(e);for(let e=0;e<100;e++){o.sort(t);var l=o[o.length-1],c=getCentroid(o),u=i(c,l,2,-1);if(u.fx<o[0].fx){var _=i(c,l,3,-2);o=r(o,_.fx<u.fx?_:u)}else if(u.fx>=o[o.length-2].fx){let e;o=u.fx>l.fx?(e=i(c,l,.5,.5)).fx<l.fx?r(o,e):n(o):(e=i(c,l,1.5,-.5)).fx<u.fx?r(o,e):n(o)}else o=r(o,u)}return o[0]}function processVennData(e,s){const t=isArray(e)?e:[],r=t.reduce(function(e,t){return t.sets&&isValidSet(t)&&-1===e.indexOf(t.sets[0])&&e.push(t.sets[0]),e},[]).sort(),n=t.reduce(function(e,t){return t.sets&&isValidRelation(t)&&!t.sets.some(function(e){return-1===r.indexOf(e)})&&(e[t.sets.sort().join(s)]={sets:t.sets,value:t.value||0}),e},{});return r.reduce(function(t,r,e,n){const i=n.slice(e+1);return i.forEach(function(e){t.push(r+s+e)}),t},[]).forEach(function(e){var t;n[e]||(t={sets:e.split(s),value:0},n[e]=t)}),Object.keys(n).map(function(e){return n[e]})}function sortByTotalOverlap(e,t){return void 0!==t.totalOverlap&&void 0!==e.totalOverlap?t.totalOverlap-e.totalOverlap:NaN}const VennUtils={geometry:Geometry_GeometryUtilities,geometryCircles:Geometry_CircleUtilities,addOverlapToSets:addOverlapToSets,getCentroid:getCentroid,getDistanceBetweenCirclesByOverlap:getDistanceBetweenCirclesByOverlap,getLabelWidth:getLabelWidth,getMarginFromCircles:getMarginFromCircles,isSet:isSet,layoutGreedyVenn:layoutGreedyVenn,loss:loss,nelderMead:nelderMead,processVennData:processVennData,sortByTotalOverlap:sortByTotalOverlap},Venn_VennUtils=VennUtils,animObject=external_highcharts_src_js_default_default()["animObject"],color=external_highcharts_src_js_default_Color_default()["parse"],{getAreaOfIntersectionBetweenCircles,getCirclesIntersectionPolygon,isCircle1CompletelyOverlappingCircle2,isPointInsideAllCircles:VennSeries_isPointInsideAllCircles,isPointOutsideAllCircles:VennSeries_isPointOutsideAllCircles}=Geometry_CircleUtilities,VennSeries_getCenterOfPoints=Geometry_GeometryUtilities["getCenterOfPoints"],ScatterSeries=external_highcharts_src_js_default_SeriesRegistry_default().seriesTypes["scatter"],{addEvent,extend:VennSeries_extend,isArray:VennSeries_isArray,isNumber:VennSeries_isNumber,isObject:VennSeries_isObject,merge}=external_highcharts_src_js_default_default();class VennSeries extends ScatterSeries{static getLabelPosition(n,i){let e=n.reduce((e,t)=>{var r=t.r/2;return[{x:t.x,y:t.y},{x:t.x+r,y:t.y},{x:t.x-r,y:t.y},{x:t.x,y:t.y+r},{x:t.x,y:t.y-r}].reduce((e,t)=>{var r=Venn_VennUtils.getMarginFromCircles(t,n,i);return e.margin<r&&(e.point=t,e.margin=r),e},e)},{point:void 0,margin:-Number.MAX_VALUE}).point;var t=Venn_VennUtils.nelderMead(e=>-Venn_VennUtils.getMarginFromCircles({x:e[0],y:e[1]},n,i),[e.x,e.y]);return e={x:t[0],y:t[1]},e=VennSeries_isPointInsideAllCircles(e,n)&&VennSeries_isPointOutsideAllCircles(e,i)?e:1<n.length?VennSeries_getCenterOfPoints(getCirclesIntersectionPolygon(n)):{x:n[0].x,y:n[0].y}}static getLabelValues(e,t){const n=e.sets,r=t.reduce((e,t)=>{var r=-1<n.indexOf(t.sets[0]);return t.circle&&e[r?"internal":"external"].push(t.circle),e},{internal:[],external:[]});r.external=r.external.filter(t=>r.internal.some(e=>!isCircle1CompletelyOverlappingCircle2(t,e)));e=VennSeries.getLabelPosition(r.internal,r.external);return{position:e,width:Venn_VennUtils.getLabelWidth(e,r.internal,r.external)}}static layout(e){const t={},r={};if(0<e.length){const a=Venn_VennUtils.layoutGreedyVenn(e);var n=e.filter(Venn_VennUtils.isSet);for(const o of e){const l=o.sets;var i=l.join(),s=Venn_VennUtils.isSet(o)?a[i]:getAreaOfIntersectionBetweenCircles(l.map(e=>a[e]));s&&(t[i]=s,r[i]=VennSeries.getLabelValues(o,n))}}return{mapOfIdToShape:t,mapOfIdToLabelValues:r}}static getScale(e,t,r){var n=r.bottom-r.top,i=r.right-r.left,s=(r.right+r.left)/2,r=(r.top+r.bottom)/2,i=Math.min(0<i?1/i*e:1,0<n?1/n*t:1);return{scale:i,centerX:e/2-s*i,centerY:t/2-r*i}}static updateFieldBoundaries(e,t){var r=t.x-t.r,n=t.x+t.r,i=t.y+t.r,t=t.y-t.r;return(!VennSeries_isNumber(e.left)||e.left>r)&&(e.left=r),(!VennSeries_isNumber(e.right)||e.right<n)&&(e.right=n),(!VennSeries_isNumber(e.top)||e.top>t)&&(e.top=t),(!VennSeries_isNumber(e.bottom)||e.bottom<i)&&(e.bottom=i),e}animate(e){if(!e){var t=animObject(this.options.animation);for(const n of this.points){var r=n.shapeArgs;if(n.graphic&&r){const i={},s={};r.d?i.opacity=.001:(i.r=0,s.r=r.r),n.graphic.attr(i).animate(s,t),r.d&&setTimeout(()=>{n?.graphic?.animate({opacity:1})},t.duration)}}}}drawPoints(){var e=this.chart,t=this.group,r=this.points||[],n=e.renderer;for(const a of r){var i={zIndex:VennSeries_isArray(a.sets)?a.sets.length:0},s=a.shapeArgs;e.styledMode||VennSeries_extend(i,this.pointAttribs(a,a.state)),Series_DrawPointUtilities.draw(a,{isNew:!a.graphic,animatableAttribs:s,attribs:i,group:t,renderer:n,shapeType:s?.d?"path":"circle"})}}init(){ScatterSeries.prototype.init.apply(this,arguments),delete this.opacity}pointAttribs(e,t){var r=this.options||{},n=e?.options||{},t=t&&r.states[t]||{},r=merge(r,{color:e?.color},n,t);return{fill:color(r.color).brighten(r.brightness).get(),opacity:r.opacity,stroke:r.borderColor,"stroke-width":r.borderWidth,dashstyle:r.borderDashStyle}}translate(){var e=this.chart,t=(this.dataTable.modified=this.dataTable,this.generatePoints(),Venn_VennUtils.processVennData(this.options.data,VennSeries.splitter));const{mapOfIdToShape:n,mapOfIdToLabelValues:i}=VennSeries.layout(t),r=Object.keys(n).filter(e=>{e=n[e];return e&&VennSeries_isNumber(e.r)}).reduce((e,t)=>VennSeries.updateFieldBoundaries(e,n[t]),{top:0,bottom:0,left:0,right:0}),s=VennSeries.getScale(e.plotWidth,e.plotHeight,r),a=s.scale,o=s.centerX,l=s.centerY;for(const c of this.points){const u=VennSeries_isArray(c.sets)?c.sets:[],_=u.join(),d=n[_],f=i[_]||{},h=c.options?.dataLabels;let e,t=f.width,r=f.position;if(d){if(d.r)e={x:o+d.x*a,y:l+d.y*a,r:d.r*a};else if(d.d){const g=d.d;g.forEach(e=>{"M"===e[0]?(e[1]=o+e[1]*a,e[2]=l+e[2]*a):"A"===e[0]&&(e[1]=e[1]*a,e[2]=e[2]*a,e[6]=o+e[6]*a,e[7]=l+e[7]*a)}),e={d:g}}r?(r.x=o+r.x*a,r.y=l+r.y*a):r={},VennSeries_isNumber(t)&&(t=Math.round(t*a))}c.shapeArgs=e,r&&e&&(c.plotX=r.x,c.plotY=r.y),t&&e&&(c.dlOptions=merge(!0,{style:{width:t}},VennSeries_isObject(h,!0)?h:void 0)),c.name=c.options.name||u.join("∩")}}}VennSeries.splitter="highcharts-split",VennSeries.defaultOptions=merge(ScatterSeries.defaultOptions,Venn_VennSeriesDefaults),VennSeries_extend(VennSeries.prototype,{axisTypes:[],directTouch:!0,isCartesian:!1,pointArrayMap:["value"],pointClass:Venn_VennPoint,utils:Venn_VennUtils}),addEvent(VennSeries,"afterSetOptions",function(e){const t=e.options,r=t.states||{};if(this.is("venn"))for(const n of Object.keys(r))r[n].halo=!1}),external_highcharts_src_js_default_SeriesRegistry_default().registerSeriesType("venn",VennSeries);const Venn_VennSeries=null,venn_src=external_highcharts_src_js_default_default();export{venn_src as default};