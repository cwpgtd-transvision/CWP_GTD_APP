import*as __WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__ from"../highcharts.src.js";var __webpack_require__={n:e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return __webpack_require__.d(t,{a:t}),t},d:(e,t)=>{for(var a in t)__webpack_require__.o(t,a)&&!__webpack_require__.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};const external_highcharts_src_js_default_namespaceObject=__WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__.default;var external_highcharts_src_js_default_default=__webpack_require__.n(external_highcharts_src_js_default_namespaceObject);const external_highcharts_src_js_default_SeriesRegistry_namespaceObject=__WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__.default.SeriesRegistry;var external_highcharts_src_js_default_SeriesRegistry_default=__webpack_require__.n(external_highcharts_src_js_default_SeriesRegistry_namespaceObject);const{prototype:{pointClass:MapPoint}}=external_highcharts_src_js_default_SeriesRegistry_default().seriesTypes["map"],isNumber=external_highcharts_src_js_default_default()["isNumber"];class GeoHeatmapPoint extends MapPoint{applyOptions(e,t){const a=super.applyOptions.call(this,e,t),{lat:r,lon:i}=a.options;var o,s;return isNumber(i)&&isNumber(r)&&({colsize:e=1,rowsize:t=1}=this.series.options,o=i-e/2,s=r-t/2,a.geometry=a.options.geometry={type:"Polygon",coordinates:[[[o,s],[o+e,s],[o+e,s+t],[o,s+t],[o,s]]]}),a}}const GeoHeatmap_GeoHeatmapPoint=GeoHeatmapPoint,doc=external_highcharts_src_js_default_default()["doc"],{defined,pick}=external_highcharts_src_js_default_default();function colorFromPoint(e,t){const a=t.series.colorAxis;if(a){const r=a.toColor(e||0,t).split(")")[0].split("(")[1].split(",").map(e=>pick(parseFloat(e),parseInt(e,10)));return r[3]=255*pick(r[3],1),defined(e)&&t.visible||(r[3]=0),r}return[0,0,0,0]}function getContext(e){const{canvas:t,context:a}=e;return t&&a?(a.clearRect(0,0,t.width,t.height),a):(e.canvas=doc.createElement("canvas"),e.context=e.canvas.getContext("2d",{willReadFrequently:!0})||void 0,e.context)}const InterpolationUtilities={colorFromPoint:colorFromPoint,getContext:getContext},Series_InterpolationUtilities=InterpolationUtilities,{animObject,stop}=external_highcharts_src_js_default_default(),noop=external_highcharts_src_js_default_default()["noop"],{colorFromPoint:GeoHeatmapSeries_colorFromPoint,getContext:GeoHeatmapSeries_getContext}=Series_InterpolationUtilities,{map:MapSeries}=external_highcharts_src_js_default_SeriesRegistry_default()["seriesTypes"],{addEvent,error,extend,isNumber:GeoHeatmapSeries_isNumber,isObject,merge,pick:GeoHeatmapSeries_pick}=external_highcharts_src_js_default_default();function normalizeLonValue(e){return e-360*Math.floor((e+180)/360)}function scaledPointPos(e,t,a,r,i,o){return Math.ceil(a*(r-1-(t+90)/o)+(e+180)/i)}class GeoHeatmapSeries extends MapSeries{constructor(){super(...arguments),this.isDirtyCanvas=!0}update(){var e=this;e.options=merge(e.options,arguments[0]),e.getInterpolation().enabled&&(e.isDirtyCanvas=!0,e.points.forEach(e=>{e.graphic&&(e.graphic.destroy(),delete e.graphic)})),super.update.apply(e,arguments)}translate(){this.getInterpolation().enabled&&this.image&&!this.isDirty&&!this.isDirtyData||super.translate.apply(this,arguments)}getInterpolation(){return isObject(this.options.interpolation)?this.options.interpolation:{blur:1,enabled:this.options.interpolation}}drawPoints(){const e=this,t=e.chart,a=t.mapView,r=e.options;if(e.getInterpolation().enabled&&a&&e.bounds){const h=e.context||GeoHeatmapSeries_getContext(e),{canvas:d,colorAxis:R,image:u,chart:t,points:g}=e,[m,f]=[GeoHeatmapSeries_pick(r.colsize,1),GeoHeatmapSeries_pick(r.rowsize,1)],y=a.projectedUnitsToPixels({x:e.bounds.x1,y:e.bounds.y2}),b=a.projectedUnitsToPixels({x:e.bounds.x2,y:e.bounds.y1});if(d&&h&&R&&y&&b){const{x,y:j}=y,w=b.x-x,v=b.y-j,P={x:x,y:j,width:w,height:v};if(e.isDirtyCanvas||e.isDirtyData||"Orthographic"===a.projection.options.name){const S=d.width=1+~~(360/m),D=d.height=1+~~(180/f),T=S*D,C=new Uint8ClampedArray(4*T),{lat:U=0,lon:A=0}=g[0].options,H=A%f!=0,G=U%m!=0,N=H?e=>Math.round(e/f)*f:e=>e,z=G?e=>Math.round(e/m)*m:e=>e,F=g.length;(H||G)&&error("Highcharts Warning: For best performance, lon/lat datapoints should spaced by a single colsize/rowsize",!1,e.chart,{colsize:String(m),rowsize:String(f)}),e.directTouch=!1,e.isDirtyCanvas=!0;for(let e=0;e<F;e++){var i=g[e],{lon:o,lat:s}=i.options;GeoHeatmapSeries_isNumber(o)&&GeoHeatmapSeries_isNumber(s)&&C.set(GeoHeatmapSeries_colorFromPoint(i.value,i),4*scaledPointPos(N(o),z(s),S,D,m,f))}var n=e.getInterpolation().blur,n=0===n?1:11*n,l=~~(S*n),n=~~(D*n),p=~~w,_=~~v,c=new ImageData(C,S,D),c=(d.width=l,d.height=n,h.putImageData(c,0,0),h.globalCompositeOperation="copy",h.drawImage(d,0,0,c.width,c.height,0,0,l,n),this.getProjectedImageData(a,p,_,h.getImageData(0,0,l,n),d,x,j));d.width=p,d.height=_,h.putImageData(new ImageData(c,p,_),0,0)}if(u)if(t.renderer.globalAnimation&&t.hasRendered){const O=Number(u.attr("x")),L=Number(u.attr("y")),k=Number(u.attr("width")),I=Number(u.attr("height")),E=merge(animObject(t.renderer.globalAnimation)),M=E.step;E.step=function(){M&&M.apply(this,arguments),((e,t)=>{t=t.pos;u.attr({x:O+(x-O)*t,y:L+(j-L)*t,width:k+(w-k)*t,height:I+(v-I)*t})}).apply(this,arguments)},u.attr(merge({animator:0},e.isDirtyCanvas?{href:d.toDataURL("image/png",1)}:void 0)).animate({animator:1},E)}else stop(u),u.attr(merge(P,e.isDirtyCanvas?{href:d.toDataURL("image/png",1)}:void 0));else e.image=t.renderer.image(d.toDataURL("image/png",1)).attr(P).add(e.group);e.isDirtyCanvas=!1}}else super.drawPoints.apply(e,arguments)}getProjectedImageData(t,a,e,r,i,o,s){const n=new Uint8ClampedArray(a*e*4),l=GeoHeatmapSeries_pick(t.projection.options.rotation?.[0],0),p=i.width/360,_=-1*i.height/180;let c=-1;for(let e=0;e<n.length;e+=4){var h,d=e/4%a;0==d&&c++;const u=t.pixelsToLonLat({x:o+d,y:s+c});u&&(u.lon>-180-l&&u.lon<180-l&&(u.lon=normalizeLonValue(u.lon)),h=(d=[u.lon,u.lat])[0]*p+i.width/2,d=d[1]*_+i.height/2,0<=h&&h<=i.width&&0<=d&&d<=i.height&&(d=Math.floor(d)*i.width*4+4*Math.round(h),n[e]=r.data[d],n[e+1]=r.data[1+d],n[e+2]=r.data[2+d],n[e+3]=r.data[3+d]))}return n}searchPoint(e,t){const a=this,r=this.chart,i=r.mapView;if(i&&a.bounds&&a.image&&r.tooltip&&r.tooltip.options.enabled)if(!r.pointer.hasDragged&&(+a.image.attr("animator")<=.01||.99<=+a.image.attr("animator"))){var o=i.projectedUnitsToPixels({x:a.bounds.x1,y:a.bounds.y2}),s=i.projectedUnitsToPixels({x:a.bounds.x2,y:a.bounds.y1});if(r.pointer.normalize(e),e.lon&&e.lat&&o&&s&&e.chartX-r.plotLeft>o.x&&e.chartX-r.plotLeft<s.x&&e.chartY-r.plotTop>o.y&&e.chartY-r.plotTop<s.y)return this.searchKDTree({clientX:e.chartX,lon:normalizeLonValue(e.lon),lat:e.lat},t,e)}else r.tooltip.destroy()}}GeoHeatmapSeries.defaultOptions=merge(MapSeries.defaultOptions,{nullColor:"transparent",tooltip:{pointFormat:"Lat: {point.lat}, Lon: {point.lon}, Value: {point.value}<br/>"},borderWidth:0,colsize:1,rowsize:1,stickyTracking:!0,interpolation:{enabled:!1,blur:1}}),addEvent(GeoHeatmapSeries,"afterDataClassLegendClick",function(){this.isDirtyCanvas=!0,this.drawPoints()}),extend(GeoHeatmapSeries.prototype,{type:"geoheatmap",applyJitter:noop,pointClass:GeoHeatmap_GeoHeatmapPoint,pointArrayMap:["lon","lat","value"],kdAxisArray:["lon","lat"]}),external_highcharts_src_js_default_SeriesRegistry_default().registerSeriesType("geoheatmap",GeoHeatmapSeries);const GeoHeatmap_GeoHeatmapSeries=null,geoheatmap_src=external_highcharts_src_js_default_default();export{geoheatmap_src as default};