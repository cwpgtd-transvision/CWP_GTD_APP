"use strict";import U from"../../Utilities.js";const{defined,isNumber,pick}=U;function arc(c,n,i,a,L){const o=[];if(L){let t=L.start||0,e=L.end||0;var s=pick(L.r,i),a=pick(L.r,a||i),i=2e-4/(L.borderRadius?1:Math.max(s,1)),l=Math.abs(e-t-2*Math.PI)<i,u=(l&&(t=Math.PI/2,e=2.5*Math.PI-i),L.innerR),l=pick(L.open,l),d=Math.cos(t),p=Math.sin(t),M=Math.cos(e),h=Math.sin(e),i=pick(L.longArc,e-t-Math.PI<i?0:1);let r=["A",s,a,0,i,pick(L.clockwise,1),c+s*M,n+a*h];r.params={start:t,end:e,cx:c,cy:n},o.push(["M",c+s*d,n+a*p],r),defined(u)&&((r=["A",u,u,0,i,defined(L.clockwise)?1-L.clockwise:0,c+u*d,n+u*p]).params={start:e,end:t,cx:c,cy:n},o.push(l?["M",c+u*M,n+u*h]:["L",c+u*M,n+u*h],r)),l||o.push(["Z"])}return o}function callout(t,e,r,c,n){var i,a=Math.min(n?.r||0,r,c),L=a+6,o=n?.anchorX,n=n?.anchorY||0;const s=roundedRect(t,e,r,c,{r:a});return isNumber(o)&&(o<r&&0<o&&n<c&&0<n||(r-L<t+o?e+L<n&&n<e+c-L?s.splice(3,1,["L",t+r,n-6],["L",t+r+6,n],["L",t+r,n+6],["L",t+r,e+c-a]):o<r?(i=n<e+L,s.splice(i?2:5,0,["L",o,n],["L",t+r-a,i?e:e+c])):s.splice(3,1,["L",t+r,c/2],["L",o,n],["L",t+r,c/2],["L",t+r,e+c-a]):t+o<L?e+L<n&&n<e+c-L?s.splice(7,1,["L",t,n+6],["L",t-6,n],["L",t,n-6],["L",t,e+a]):0<o?(i=n<e+L,s.splice(i?1:6,0,["L",o,n],["L",t+a,i?e:e+c])):s.splice(7,1,["L",t,c/2],["L",o,n],["L",t,c/2],["L",t,e+a]):c<n&&o<r-L?s.splice(5,1,["L",o+6,e+c],["L",o,e+c+6],["L",o-6,e+c],["L",t+a,e+c]):n<0&&L<o&&s.splice(1,1,["L",o-6,e],["L",o,e-6],["L",o+6,e],["L",r-a,e]))),s}function circle(t,e,r,c){return arc(t+r/2,e+c/2,r/2,c/2,{start:.5*Math.PI,end:2.5*Math.PI,open:!1})}function diamond(t,e,r,c){return[["M",t+r/2,e],["L",t+r,e+c/2],["L",t+r/2,e+c],["L",t,e+c/2],["Z"]]}function rect(t,e,r,c,n){return n?.r?roundedRect(t,e,r,c,n):[["M",t,e],["L",t+r,e],["L",t+r,e+c],["L",t,e+c],["Z"]]}function roundedRect(t,e,r,c,n){n=n?.r||0;return[["M",t+n,e],["L",t+r-n,e],["A",n,n,0,0,1,t+r,e+n],["L",t+r,e+c-n],["A",n,n,0,0,1,t+r-n,e+c],["L",t+n,e+c],["A",n,n,0,0,1,t,e+c-n],["L",t,e+n],["A",n,n,0,0,1,t+n,e],["Z"]]}function triangle(t,e,r,c){return[["M",t+r/2,e],["L",t+r,e+c],["L",t,e+c],["Z"]]}function triangleDown(t,e,r,c){return[["M",t,e],["L",t+r,e],["L",t+r/2,e+c],["Z"]]}const Symbols={arc:arc,callout:callout,circle:circle,diamond:diamond,rect:rect,roundedRect:roundedRect,square:rect,triangle:triangle,"triangle-down":triangleDown};export default Symbols;