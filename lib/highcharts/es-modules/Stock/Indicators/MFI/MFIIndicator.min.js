"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const SMAIndicator=SeriesRegistry.seriesTypes["sma"];import U from"../../../Core/Utilities.js";const{extend,merge,error,isArray}=U;function sumArray(e){return e.reduce(function(e,r){return e+r})}function toFixed(e,r){return parseFloat(e.toFixed(r))}function calculateTypicalPrice(e){return(e[1]+e[2]+e[3])/3}function calculateRawMoneyFlow(e,r){return e*r}class MFIIndicator extends SMAIndicator{getValues(e,r){const t=r.period,i=e.xData,a=e.yData,s=a?a.length:0,o=r.decimals,c=e.chart.get(r.volumeSeriesID),n=c?.getColumn("y")||[],l=[],u=[],d=[],p=[],y=[];let m,f,I,h,S,g,F=!1,M=1;if(c){if(!(i.length<=t)&&isArray(a[0])&&4===a[0].length&&n){for(m=calculateTypicalPrice(a[M]);M<t+1;)f=m,m=calculateTypicalPrice(a[M]),F=m>=f,I=calculateRawMoneyFlow(m,n[M]),p.push(F?I:0),y.push(F?0:I),M++;for(g=M-1;g<s;g++)g>M-1&&(p.shift(),y.shift(),f=m,m=calculateTypicalPrice(a[g]),F=m>f,I=calculateRawMoneyFlow(m,n[g]),p.push(F?I:0),y.push(F?0:I)),h=sumArray(y),S=toFixed(100-100/(1+sumArray(p)/h),o),l.push([i[g],S]),u.push(i[g]),d.push(S);return{values:l,xData:u,yData:d}}}else error("Series "+r.volumeSeriesID+" not found! Check `volumeSeriesID`.",!0,e.chart)}}MFIIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:void 0,volumeSeriesID:"volume",decimals:4}}),extend(MFIIndicator.prototype,{nameBase:"Money Flow Index"}),SeriesRegistry.registerSeriesType("mfi",MFIIndicator);export default MFIIndicator;