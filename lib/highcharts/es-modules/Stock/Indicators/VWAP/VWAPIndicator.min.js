"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const SMAIndicator=SeriesRegistry.seriesTypes["sma"];import U from"../../../Core/Utilities.js";const{error,isArray,merge}=U;class VWAPIndicator extends SMAIndicator{getValues(e,r){const s=e.chart,t=e.xData,i=e.yData,a=r.period;let o=!0,u;if(u=s.get(r.volumeSeriesID))return isArray(i[0])||(o=!1),this.calculateVWAPValues(o,t,i,u,a);error("Series "+r.volumeSeriesID+" not found! Check `volumeSeriesID`.",!0,s)}calculateVWAPValues(e,r,s,t,i){const a=t.getColumn("y"),o=a.length,u=r.length,l=[],n=[],c=[],d=[],p=[];let m,S,g,y,A,I;for(m=u<=o?u:o,A=0,I=0;A<m;A++)S=e?(s[A][1]+s[A][2]+s[A][3])/3:s[A],S*=a[A],g=I?l[A-1]+S:S,y=I?n[A-1]+a[A]:a[A],l.push(g),n.push(y),p.push([r[A],g/y]),c.push(p[A][0]),d.push(p[A][1]),++I===i&&(I=0);return{values:p,xData:c,yData:d}}}VWAPIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:void 0,period:30,volumeSeriesID:"volume"}}),SeriesRegistry.registerSeriesType("vwap",VWAPIndicator);export default VWAPIndicator;