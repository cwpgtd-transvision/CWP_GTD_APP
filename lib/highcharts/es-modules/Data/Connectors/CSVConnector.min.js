"use strict";import CSVConverter from"../Converters/CSVConverter.js";import DataConnector from"./DataConnector.js";import U from"../../Core/Utilities.js";const{merge,defined}=U;class CSVConnector extends DataConnector{constructor(e,t){e=merge(CSVConnector.defaultOptions,e);super(e,t),this.options=defined(t)?merge(e,{dataTables:t}):e,e.enablePolling&&this.startPolling(1e3*Math.max(e.dataRefreshRate||0,1))}load(t){const o=this,r=o.dataTables,{csv:e,csvURL:s,dataModifier:a,dataTables:n}=o.options;return o.emit({type:"load",csv:e,detail:t,tables:r}),Promise.resolve(s?fetch(s,{signal:o?.pollingController?.signal}).then(e=>e.text()):e||"").then(e=>(e&&this.initConverters(e,t=>{var e=this.options,o=n?.find(e=>e.key===t),o={dataTableKey:t,firstRowAsNames:o?.firstRowAsNames??e.firstRowAsNames,beforeParse:o?.beforeParse??e.beforeParse};return new CSVConverter(merge(this.options,o))},(e,t)=>{e.parse({csv:t})}),o.setModifierOptions(a,n).then(()=>e))).then(e=>(o.emit({type:"afterLoad",csv:e,detail:t,tables:r}),o)).catch(e=>{throw o.emit({type:"loadError",detail:t,error:e,tables:r}),e})}}CSVConnector.defaultOptions={csv:"",csvURL:"",enablePolling:!1,dataRefreshRate:1,firstRowAsNames:!0},DataConnector.registerType("CSV",CSVConnector);export default CSVConnector;