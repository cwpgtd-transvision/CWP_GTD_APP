"use strict";import DataModifier from"../Modifiers/DataModifier.js";import DataTable from"../DataTable.js";import U from"../../Core/Utilities.js";const{addEvent,fireEvent,merge,pick}=U;class DataConnector{constructor(t={},r=[]){this.dataTables={},this.loaded=!1,this.metadata=t.metadata||{columns:{}};let a=0;if(0<r?.length)for(let t=0,e=r.length;t<e;++t){var o=r[t],i=o?.key;this.dataTables[i??a]=new DataTable(o),i||a++}else this.dataTables[0]=new DataTable(t.dataTable)}get polling(){return!!this._polling}get table(){return this.getTable()}describeColumn(t,e){const r=this.metadata.columns;r[t]=merge(r[t]||{},e)}describeColumns(t){const e=Object.keys(t);for(var r;"string"==typeof(r=e.pop());)this.describeColumn(r,t[r])}emit(t){fireEvent(this,t.type,t)}getColumnOrder(t){const r=this.metadata.columns,e=Object.keys(r||{});if(e.length)return e.sort((t,e)=>pick(r[t].index,0)-pick(r[e].index,0))}getTable(t){return t?this.dataTables[t]:Object.values(this.dataTables)[0]}getSortedColumns(t){return this.table.getColumns(this.getColumnOrder(t))}load(){return fireEvent(this,"afterLoad",{table:this.table}),Promise.resolve(this)}on(t,e){return addEvent(this,t,e)}save(){return fireEvent(this,"saveError",{table:this.table}),Promise.reject(new Error("Not implemented"))}setColumnOrder(r){for(let t=0,e=r.length;t<e;++t)this.describeColumn(r[t],{index:t})}async setModifierOptions(t,e){for(const[a,o]of Object.entries(this.dataTables)){var r=e?.find(t=>t.key===a),r=merge(r?.dataModifier,t);const i=r&&DataModifier.types[r.type];await o.setModifier(i?new i(r):void 0)}return this}startPolling(t=1e3){const e=this,r=e.dataTables;this.pollingController=new AbortController,window.clearTimeout(e._polling),e._polling=window.setTimeout(()=>e.load().catch(t=>e.emit({type:"loadError",error:t,tables:r})).then(()=>{e._polling&&e.startPolling(t)}),t)}stopPolling(){var t=this;t.polling&&(t?.pollingController?.abort(),window.clearTimeout(t._polling),delete t._polling)}whatIs(t){return this.metadata.columns[t]}initConverters(t,e,r){let a=0;for(var[o,i]of Object.entries(this.dataTables)){const s=e(o,i);r(s,t),i.deleteColumns(),i.setColumns(s.getTable().getColumns()),0===a&&(this.converter=s),a++}}}!function(r){r.types={},r.registerType=function(t,e){return!!t&&!r.types[t]&&!!(r.types[t]=e)}}(DataConnector=DataConnector||{});export default DataConnector;