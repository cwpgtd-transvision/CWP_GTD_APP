"use strict";import DataConnector from"./DataConnector.js";import H from"../../Core/Globals.js";const win=H["win"];import HTMLTableConverter from"../Converters/HTMLTableConverter.js";import U from"../../Core/Utilities.js";const merge=U["merge"];class HTMLTableConnector extends DataConnector{constructor(e){e=merge(HTMLTableConnector.defaultOptions,e);super(e),this.converter=new HTMLTableConverter(e),this.options=e}load(e){const t=this,o=t.converter,r=t.table,{dataModifier:n,table:l}=t.options;t.emit({type:"load",detail:e,tables:{table:r},tableElement:t.tableElement});let a;var s;return"string"==typeof l?(t.tableID=l,a=win.document.getElementById(l)):(a=l,t.tableID=a.id),t.tableElement=a||void 0,t.tableElement?(o.parse(merge({tableElement:t.tableElement},t.options),e),r.deleteColumns(),r.setColumns(o.getTable().getColumns()),t.setModifierOptions(n).then(()=>(t.emit({type:"afterLoad",detail:e,tables:{table:r},tableElement:t.tableElement}),t))):(t.emit({type:"loadError",detail:e,error:s="HTML table not provided, or element with ID not found",tables:{table:r}}),Promise.reject(new Error(s)))}}HTMLTableConnector.defaultOptions={table:""},DataConnector.registerType("HTMLTable",HTMLTableConnector);export default HTMLTableConnector;