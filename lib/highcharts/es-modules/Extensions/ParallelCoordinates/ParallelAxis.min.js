"use strict";import ParallelCoordinatesDefaults from"./ParallelCoordinatesDefaults.js";import U from"../../Core/Utilities.js";const{addEvent,arrayMax,arrayMin,isNumber,merge,pick}=U;class ParallelAxisAdditions{constructor(a){this.axis=a}setPosition(a,e){const i=this.axis,t=i.chart,s=((this.position||0)+.5)/(t.parallelInfo.counter+1);t.polar?e.angle=360*s:(e[a[0]]=100*s+"%",i[a[1]]=e[a[1]]=0,i[a[2]]=e[a[2]]=null,i[a[3]]=e[a[3]]=null)}}var ParallelAxis;!function(){function e(a){const e=this,i=e.chart,t=e.parallelCoordinates;let s=["left","width","height","top"];var l;i.hasParallelCoordinates&&(i.inverted&&(s=s.reverse()),e.isXAxis?e.options=merge(e.options,ParallelCoordinatesDefaults.xAxis,a.userOptions):(l=i.yAxis.indexOf(e),e.options=merge(e.options,e.chart.options.chart.parallelAxes,a.userOptions),t.position=pick(t.position,0<=l?l:i.yAxis.length),t.setPosition(s,e.options)))}function i(e){var i=this,a=i.chart,t=i.parallelCoordinates;if(t&&a&&a.hasParallelCoordinates&&!i.isXAxis){const s=t.position;let a=[];i.series.forEach(function(i){i.visible&&isNumber(s)&&(a=(i.pointArrayMap||["y"]).reduce((a,e)=>[...a,i.getColumn(e)?.[s]??null],a))}),a=a.filter(isNumber),i.dataMin=arrayMin(a),i.dataMax=arrayMax(a),e.preventDefault()}}function t(){var a=this;a.parallelCoordinates||(a.parallelCoordinates=new ParallelAxisAdditions(a))}(ParallelAxis||(ParallelAxis={})).compose=function(a){a.keepProps.includes("parallel")||((a=a).keepProps.push("parallel"),addEvent(a,"init",t),addEvent(a,"afterSetOptions",e),addEvent(a,"getSeriesExtremes",i))}}();export default ParallelAxis;