"use strict";import DPU from"../DrawPointUtilities.js";import H from"../../Core/Globals.js";const noop=H["noop"];import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const ColumnSeries=SeriesRegistry.seriesTypes["column"];import U from"../../Core/Utilities.js";const{extend,isArray,isNumber,isObject,merge}=U;import WordcloudPoint from"./WordcloudPoint.js";import WordcloudSeriesDefaults from"./WordcloudSeriesDefaults.js";import WU from"./WordcloudUtils.js";const{archimedeanSpiral,extendPlayingField,getBoundingBoxFromPolygon,getPlayingField,getPolygon,getRandomPosition,getRotation,getScale,getSpiral,intersectionTesting,isPolygonsColliding,rectangularSpiral,rotate2DToOrigin,rotate2DToPoint,squareSpiral,updateFieldBoundaries}=WU;class WordcloudSeries extends ColumnSeries{pointAttribs(t,e){const i=H.seriesTypes.column.prototype.pointAttribs.call(this,t,e);return delete i.stroke,delete i["stroke-width"],i}deriveFontSize(t,e,i){t=isNumber(t)?t:0,e=isNumber(e)?e:1,i=isNumber(i)?i:1;return Math.floor(Math.max(i,t*e))}drawPoints(){if(!(this.zooming||this.defaultScale&&this.group.scaleX!==this.defaultScale)){const a=this,n=a.hasRendered,r=a.xAxis,s=a.yAxis,l=a.chart,d=a.group,p=a.options,g=p.animation,c=p.allowExtendPlayingField,m=l.renderer,u=[],h=a.placementStrategy[p.placementStrategy],x=p.rotation,y=a.points.map(function(t){return t.weight}),S=Math.max.apply(null,y),f=a.points.concat().sort((t,e)=>e.weight-t.weight);let t=m.text().add(d),i;a.group.attr({scaleX:1,scaleY:1});for(const P of f){var e=1/S*P.weight,e=a.deriveFontSize(e,p.maxFontSize,p.minFontSize),e=extend({fontSize:e+"px"},p.style),e=(t.css(e).attr({x:0,y:0,text:P.name}),t.getBBox(!0));P.dimensions={height:e.height,width:e.width}}i=getPlayingField(r.len,s.len,f);var o=getSpiral(a.spirals[p.spiral],{field:i});for(const b of f){const w=1/S*b.weight,F=a.deriveFontSize(w,p.maxFontSize,p.minFontSize),M=extend({fontSize:F+"px"},p.style),z=h(b,{data:f,field:i,placed:u,rotation:x}),D=extend(a.pointAttribs(b,b.selected&&"select"),{align:"center","alignment-baseline":"middle","dominant-baseline":"middle",x:z.x,y:z.y,text:b.name,rotation:isNumber(z.rotation)?z.rotation:void 0}),W=getPolygon(z.x,z.y,b.dimensions.width,b.dimensions.height,z.rotation),A=getBoundingBoxFromPolygon(W);let t=intersectionTesting(b,{rectangle:A,polygon:W,field:i,placed:u,spiral:o,rotation:z.rotation}),e;!t&&c&&(i=extendPlayingField(i,A),t=intersectionTesting(b,{rectangle:A,polygon:W,field:i,placed:u,spiral:o,rotation:z.rotation})),isObject(t)?(D.x=(D.x||0)+t.x,D.y=(D.y||0)+t.y,A.left+=t.x,A.right+=t.x,A.top+=t.y,A.bottom+=t.y,i=updateFieldBoundaries(i,A),u.push(b),b.isNull=!1,b.isInside=!0):b.isNull=!0,g&&(e={x:D.x,y:D.y},n?(delete D.x,delete D.y):(D.x=0,D.y=0)),DPU.draw(b,{animatableAttribs:e,attribs:D,css:M,group:d,renderer:m,shapeArgs:void 0,shapeType:"text"})}t=t.destroy(),a.defaultScale=getScale(r.len,s.len,i),a.field=i,a.group.attr({scaleX:a.defaultScale,scaleY:a.defaultScale})}}hasData(){var t=this;return isObject(t)&&!0===t.visible&&isArray(t.points)&&0<t.points.length}getPlotBox(t){const e=this,{chart:i,group:o,zooming:a}=this,{plotSizeX:n=0,plotSizeY:r=0,inverted:s}=i,l=e[s?"yAxis":"xAxis"],d=e[s?"xAxis":"yAxis"],p=l?l.len:i.plotWidth,g=d?d.len:i.plotHeight,c=l?l.left:i.plotLeft,m=d?d.top:i.plotTop,u=e.field;let h=0,x=0,y=c+p/2,S=m+g/2,f=y,P=S,b=e.defaultScale||1,w=0,F=0;var M,z,D;return u&&(w=2*Math.max(Math.abs(u.top),Math.abs(u.bottom)),F=2*Math.max(Math.abs(u.left),Math.abs(u.right))),s&&([F,w]=[w,F]),o&&a&&(b=Math.max(a.scale,e.defaultScale||1),M=c+Math.max(F*b,p)/2,z=m+Math.max(w*b,g)/2,D=b-(o.scaleX||1),h=D*((n-F)/2+a.zoomX*n-p/2),x=D*((r-w)/2+a.zoomY*r-g/2),"series"===t&&(a.x=Math.max(0,Math.min(1-a.width,a.x+a.panX/a.scale)),h+=a.panX*n,a.panX=0,a.y=Math.max(0,Math.min(1-a.height,a.y+a.panY/a.scale)),x+=a.panY*r,a.panY=0),isNumber(o.translateX)&&isNumber(o.translateY)&&(f=o.translateX,P=o.translateY),y=f-h,(S=P-x)>z?S=z:S<2*m+g-z&&(S=2*m+g-z),y>M?y=M:y<2*c+p-M&&(y=2*c+p-M)),{translateX:y,translateY:S,scaleX:b,scaleY:b}}}WordcloudSeries.defaultOptions=merge(ColumnSeries.defaultOptions,WordcloudSeriesDefaults),extend(WordcloudSeries.prototype,{animate:noop,animateDrilldown:noop,animateDrillupFrom:noop,isCartesian:!1,pointClass:WordcloudPoint,setClip:noop,placementStrategy:{random:function(t,e){var i=e.field,e=e.rotation;return{x:getRandomPosition(i.width)-i.width/2,y:getRandomPosition(i.height)-i.height/2,rotation:getRotation(e.orientations,t.index,e.from,e.to)}},center:function(t,e){e=e.rotation;return{x:0,y:0,rotation:getRotation(e.orientations,t.index,e.from,e.to)}}},pointArrayMap:["weight"],spirals:{archimedean:archimedeanSpiral,rectangular:rectangularSpiral,square:squareSpiral},utils:{extendPlayingField:extendPlayingField,getRotation:getRotation,isPolygonsColliding:isPolygonsColliding,rotate2DToOrigin:rotate2DToOrigin,rotate2DToPoint:rotate2DToPoint}}),SeriesRegistry.registerSeriesType("wordcloud",WordcloudSeries);export default WordcloudSeries;