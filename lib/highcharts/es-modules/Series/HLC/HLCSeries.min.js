"use strict";import HLCPoint from"./HLCPoint.js";import HLCSeriesDefaults from"./HLCSeriesDefaults.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const ColumnSeries=SeriesRegistry.seriesTypes["column"];import U from"../../Core/Utilities.js";const{crisp,extend,merge}=U;import D from"../../Core/Defaults.js";const defaultOptions=D["defaultOptions"];class HLCSeries extends ColumnSeries{extendStem(t,e,s){const o=t[0],i=t[1];"number"==typeof o[2]&&(o[2]=Math.max(s+e,o[2])),"number"==typeof i[2]&&(i[2]=Math.min(s-e,i[2]))}getPointPath(t,e){const s=e.strokeWidth(),o=t.series,i=crisp(t.plotX||0,s),r=Math.round(t.shapeArgs.width/2),n=[["M",i,Math.round(t.yBottom)],["L",i,Math.round(t.plotHigh)]];return null!==t.close&&(e=crisp(t.plotClose,s),n.push(["M",i,e],["L",i+r,e]),o.extendStem(n,s/2,e)),n}drawSinglePoint(t){const e=t.series,s=e.chart;let o,i=t.graphic;void 0!==t.plotY&&(i||(t.graphic=i=s.renderer.path().add(e.group)),s.styledMode||i.attr(e.pointAttribs(t,t.selected&&"select")),o=e.getPointPath(t,i),i[i?"animate":"attr"]({d:o}).addClass(t.getClassName(),!0))}drawPoints(){this.points.forEach(this.drawSinglePoint)}init(){super.init.apply(this,arguments),this.options.stacking=void 0}pointAttribs(t,e){const s=super.pointAttribs.call(this,t,e);return delete s.fill,s}toYData(t){return[t.high,t.low,t.close]}translate(){const i=this,r=i.yAxis,t=this.pointArrayMap&&this.pointArrayMap.slice()||[],n=t.map(t=>"plot"+(t.charAt(0).toUpperCase()+t.slice(1)));n.push("yBottom"),t.push("low"),super.translate.apply(i),i.points.forEach(function(o){t.forEach(function(t,e){let s=o[t];null!==s&&(i.dataModify&&(s=i.dataModify.modifyValue(s)),o[n[e]]=r.toPixels(s,!0))}),o.tooltipPos[1]=o.plotHigh+r.pos-i.chart.plotTop})}}HLCSeries.defaultOptions=merge(ColumnSeries.defaultOptions,HLCSeriesDefaults),extend(HLCSeries.prototype,{pointClass:HLCPoint,animate:null,directTouch:!1,keysAffectYAxis:["low","high"],pointArrayMap:["high","low","close"],pointAttrToOptions:{stroke:"color","stroke-width":"lineWidth"},pointValKey:"close"});const HLCDefaultLangOptions={stockOpen:"Open",stockHigh:"High",stockLow:"Low",stockClose:"Close"};extend(defaultOptions.lang,HLCDefaultLangOptions),SeriesRegistry.registerSeriesType("hlc",HLCSeries);export default HLCSeries;