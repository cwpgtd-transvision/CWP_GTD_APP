"use strict";import RenkoPoint from"./RenkoPoint.js";import RenkoSeriesDefaults from"./RenkoSeriesDefaults.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";import ColumnSeries from"../Column/ColumnSeries.js";import U from"../../Core/Utilities.js";const{extend,merge,relativeLength,isNumber}=U;class RenkoSeries extends ColumnSeries{constructor(){super(...arguments),this.hasDerivedData=!0,this.allowDG=!1}init(){super.init.apply(this,arguments),this.renkoData=[]}setData(e,t,o){this.renkoData=[],super.setData(e,t,o,!1)}getXExtremes(e){return this.processData(),{min:(e=this.getColumn("x",!0))[0],max:e[e.length-1]}}getProcessedData(){const e=this.dataTable.modified,t=[],o=[],s=[];var r=this.getColumn("x",!0),i=this.getColumn("y",!0);if(!this.renkoData||0<this.renkoData.length)return{modified:e,closestPointRange:1,cropped:!1,cropStart:0};var n=this.options.boxSize,a=isNumber(n)?n:relativeLength(n,i[0]);const l=[],p=r.length;let u=0,m=i[0];for(let t=1;t<p;t++){var h=i[t]-i[t-1];if(a<h){2===u&&(m+=a);for(let e=0;e<h/a;e++)l.push({x:r[t]+e,low:m,y:m+a,color:this.options.color,upTrend:!0}),m+=a;u=1}else if(Math.abs(h)>a){1===u&&(m-=a);for(let e=0;e<Math.abs(h)/a;e++)l.push({x:r[t]+e,low:m-a,y:m,color:this.options.downColor,upTrend:!1}),m-=a;u=2}}for(const f of this.renkoData=l)t.push(f.x),o.push(f.y),s.push(f.low);return this.processedData=l,e.setColumn("x",t),e.setColumn("y",o),e.setColumn("low",s),{modified:e,cropped:!1,cropStart:0,closestPointRange:1}}}RenkoSeries.defaultOptions=merge(ColumnSeries.defaultOptions,RenkoSeriesDefaults),extend(RenkoSeries.prototype,{pointClass:RenkoPoint}),SeriesRegistry.registerSeriesType("renko",RenkoSeries);export default RenkoSeries;