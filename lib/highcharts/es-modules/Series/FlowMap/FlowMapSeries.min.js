"use strict";import FlowMapPoint from"./FlowMapPoint.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{series:{prototype:{pointClass:Point}},seriesTypes:{column:ColumnSeries,map:MapSeries,mapline:MapLineSeries}}=SeriesRegistry;import U from"../../Core/Utilities.js";const{addEvent,arrayMax,arrayMin,defined,extend,isArray,merge,pick,relativeLength}=U;class FlowMapSeries extends MapLineSeries{static getLength(t,i){return Math.sqrt(t*t+i*i)}static normalize(t,i){var e=this.getLength(t,i);return[t/e,i/e]}static markerEndPath(t,i,e,o){var s,r,a=relativeLength(o.width||0,this.getLength(i[0]-t[0],i[1]-t[1])),o=o.markerType||"arrow",[n,p]=this.normalize(i[0]-t[0],i[1]-t[1]);const h=[];return"arrow"===o&&([s,r]=t,s-=n*a,r-=p*a,h.push(["L",s,r]),h.push(["L",e[0],e[1]]),[s,r]=i,s+=n*a,r+=p*a,h.push(["L",s,r])),"mushroom"===o&&([s,r]=t,[o,t]=i,[i,e]=e,i=2*(i-(i=(o-s)/2+s))+i,e=2*(e-(e=(t-r)/2+r))+e,s-=n*a,r-=p*a,h.push(["L",s,r]),o+=n*a,t+=p*a,h.push(["Q",i,e,o,t])),h}animate(t){const i=this.points;t||i.forEach(t=>{if(t.shapeArgs&&isArray(t.shapeArgs.d)&&t.shapeArgs.d.length){var e=t.shapeArgs.d,o=e[0][1],s=e[0][2];if(o&&s){const r=[];for(let i=0;i<e.length;i++){r.push([...e[i]]);for(let t=1;t<e[i].length;t++)r[i][t]=t%2?o:s}t.graphic&&(t.graphic.attr({d:r}),t.graphic.animate({d:e}))}}})}getLinkWidth(t){var i=this.options.width,e=t.options.weight||this.options.weight;if(t.options.weight=e,i&&!e)return i;t=this.smallestWeight,i=this.greatestWeight;if(!defined(e)||!t||!i)return 0;var o=this.options.minWidth;return(e-t)*(this.options.maxWidth-o)/(i-t||1)+o}autoCurve(t,i,e,o,s,r){const a=e-t,n=o-i,p=(e-t)/2+t,h=(o-i)/2+i,l=p-s,d=h-r;e=a*l+n*d,t=a*d-n*l;let c=Math.atan2(t,e),g=180*c/Math.PI;return c=(g=g<0?360+g:g)*Math.PI/180,.7*-Math.sin(c)}pointAttribs(t,i){const e=MapSeries.prototype.pointAttribs.call(this,t,i);return e.fill=pick(t.options.fillColor,t.options.color,"none"===this.options.fillColor?null:this.options.fillColor,this.color),e["fill-opacity"]=pick(t.options.fillOpacity,this.options.fillOpacity),e["stroke-width"]=pick(t.options.lineWidth,this.options.lineWidth,1),t.options.opacity&&(e.opacity=t.options.opacity),e}translate(){!this.chart.hasRendered||!this.isDirtyData&&this.hasRendered||(this.processData(),this.generatePoints());const h=[];let l=0,d=0;this.points.forEach(t=>{const i=this.chart,e=i.mapView,o=t.options,s=()=>{t.series.isDirty=!0},r=t=>{t=i.get(t);if(t instanceof Point&&t.plotX&&t.plotY)return addEvent(t,"update",s),{x:t.plotX,y:t.plotY}},a=t=>isArray(t)?{lon:t[0],lat:t[1]}:t;let n,p;"string"==typeof o.from?n=r(o.from):"object"==typeof o.from&&e&&(n=e.lonLatToPixels(a(o.from))),"string"==typeof o.to?p=r(o.to):"object"==typeof o.to&&e&&(p=e.lonLatToPixels(a(o.to))),t.fromPos=n,t.toPos=p,n&&p&&(l+=(n.x+p.x)/2,d+=(n.y+p.y)/2),pick(t.options.weight,this.options.weight)&&h.push(pick(t.options.weight,this.options.weight))}),this.smallestWeight=arrayMin(h),this.greatestWeight=arrayMax(h),this.centerOfPoints={x:l/this.points.length,y:d/this.points.length},this.points.forEach(t=>{this.getLinkWidth(t)?(t.fromPos&&(t.plotX=t.fromPos.x,t.plotY=t.fromPos.y),t.shapeType="path",t.shapeArgs=this.getPointShapeArgs(t),t.color=pick(t.options.color,t.series.color)):t.shapeArgs={d:[]}})}getPointShapeArgs(t){var{fromPos:i,toPos:e}=t;if(!i||!e)return{};var o=this.getLinkWidth(t)/2,s=t.options,r=merge(this.options.markerEnd,s.markerEnd),a=pick(s.growTowards,this.options.growTowards),n=i.x||0,i=i.y||0;let p=e.x||0,h=e.y||0,l=pick(s.curveFactor,this.options.curveFactor),d=r&&r.enabled&&r.height||0;if(defined(l)||(l=this.autoCurve(n,i,p,h,this.centerOfPoints.x,this.centerOfPoints.y)),d){d=relativeLength(d,4*o);var s=p-n,c=h-i;const g=n+(s*=.5),m=i+(c*=.5),f=s,M=(s=c,c=-f,g+s*l),P=m+c*l;var[s,c]=FlowMapSeries.normalize(M-p,P-h);s*=d,c*=d,p+=s,h+=c}s=p-n,c=h-i;const g=n+(s*=.5),m=i+(c*=.5);let f=s,[y,u]=(s=c,c=-f,FlowMapSeries.normalize(s,c));var w=1+.25*Math.sqrt(l*l);y*=o*w,u*=o*w;const M=g+s*l,P=m+c*l;let[S,v]=FlowMapSeries.normalize(M-n,P-i);f=S,S=v,v=-f,S*=o,v*=o;var[w,s]=FlowMapSeries.normalize(M-p,P-h);f=w,w=-s,s=f,w*=o,s*=o,a&&(S/=o,v/=o,y/=4,u/=4);const k={d:[["M",n-S,i-v],["Q",M-y,P-u,p-w,h-s],["L",p+w,h+s],["Q",M+y,P+u,n+S,i+v],["Z"]]};r&&r.enabled&&k.d&&(c=FlowMapSeries.markerEndPath([p-w,h-s],[p+w,h+s],[e.x,e.y],r),k.d.splice(2,0,...c));a=t.options.from,o=t.options.to,n=a.lat,i=a.lon,w=o.lat,s=o.lon;return n&&i&&(t.options.from=+n+", "+ +i),w&&s&&(t.options.to=+w+", "+ +s),k}}FlowMapSeries.defaultOptions=merge(MapLineSeries.defaultOptions,{animation:!0,dataLabels:{enabled:!1},fillOpacity:.5,markerEnd:{enabled:!0,height:"40%",width:"40%",markerType:"arrow"},width:1,maxWidth:25,minWidth:5,lineWidth:void 0,tooltip:{headerFormat:'<span style="font-size: 0.8em">{series.name}</span><br/>',pointFormat:"{point.options.from} â†’ {point.options.to}: <b>{point.options.weight}</b>"}}),extend(FlowMapSeries.prototype,{pointClass:FlowMapPoint,pointArrayMap:["from","to","weight"],drawPoints:ColumnSeries.prototype.drawPoints,dataColumnKeys:ColumnSeries.prototype.dataColumnKeys,useMapGeometry:!0}),SeriesRegistry.registerSeriesType("flowmap",FlowMapSeries);export default FlowMapSeries;