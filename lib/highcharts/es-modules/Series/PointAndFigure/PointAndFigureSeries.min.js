"use strict";import PointAndFigurePoint from"./PointAndFigurePoint.js";import PointAndFigureSeriesDefaults from"./PointAndFigureSeriesDefaults.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";import PointAndFigureSymbols from"./PointAndFigureSymbols.js";import H from"../../Core/Globals.js";import U from"../../Core/Utilities.js";const composed=H["composed"],{scatter:ScatterSeries,column:{prototype:columnProto}}=SeriesRegistry.seriesTypes,{extend,merge,pushUnique,isNumber,relativeLength}=U;class PointAndFigureSeries extends ScatterSeries{constructor(){super(...arguments),this.allowDG=!1}static compose(e){pushUnique(composed,"pointandfigure")&&PointAndFigureSymbols.compose(e)}init(){super.init.apply(this,arguments),this.pnfDataGroups=[]}getProcessedData(){if(!this.pnfDataGroups)return{modified:this.dataTable.modified,cropped:!1,cropStart:0,closestPointRange:1};const e=this,t=this.dataTable.modified,i=e.options,r=e.getColumn("x",!0),s=e.getColumn("y",!0),o=i.boxSize,a=isNumber(o)?o:relativeLength(o,s[0]),u=e.pnfDataGroups,n=a*i.reversalAmount;e.calculatedBoxSize=a;let p;function d(e,t,i){const r=u[u.length-1],s=t?1:-1,o=Math.floor(s*(e-i)/a);for(let e=1;e<=o;e++){var n=i+s*(a*e);r.y.push(n)}}if(this.isDirtyData||0===u.length){for(let e=this.pnfDataGroups.length=0;e<s.length;e++){var h=r[e],l=s[e],g=s[0];if(l-g>=a){p=!0,u.push({x:h,y:[l],upTrend:p});break}if(g-l>=a){p=!1,u.push({x:h,y:[l],upTrend:p});break}}s.forEach((e,t)=>{var t=r[t],i=(i=(i=u)[i.length-1].y)[i.length-1];p&&(e-i>=a&&d(e,p,i),i-e>=n&&(p=!1,u.push({x:t,y:[],upTrend:p}),d(e,p,i))),p||(i-e>=a&&d(e,p,i),e-i>=n&&(p=!0,u.push({x:t,y:[],upTrend:p}),d(e,p,i)))})}const m=[],c=[],f=[];return u.forEach(e=>{const t=e.x,i=e.upTrend;e.y.forEach(e=>{c.push(t),f.push(e),m.push({x:t,y:e,upTrend:i})})}),t.setColumn("x",c),t.setColumn("y",f),e.pnfDataGroups=u,e.processedData=m,{modified:t,cropped:!1,cropStart:0,closestPointRange:1}}markerAttribs(e){const t=this,i=t.options,r={},s=e.pos();return r.width=t.markerWidth,r.height=t.markerHeight,s&&r.width&&r.height&&(r.x=s[0]-Math.round(r.width)/2,r.y=s[1]-Math.round(r.height)/2),i.crisp&&r.x&&(r.x=Math.floor(r.x)),r}translate(){var e=this.getColumnMetrics(),t=this.calculatedBoxSize;this.markerWidth=e.width+e.paddedWidth+e.offset,this.markerHeight=this.yAxis.toPixels(0)-this.yAxis.toPixels(t),super.translate()}}PointAndFigureSeries.defaultOptions=merge(ScatterSeries.defaultOptions,PointAndFigureSeriesDefaults),extend(PointAndFigureSeries.prototype,{takeOrdinalPosition:!0,pnfDataGroups:[],getColumnMetrics:columnProto.getColumnMetrics,pointClass:PointAndFigurePoint,sorted:!0}),SeriesRegistry.registerSeriesType("pointandfigure",PointAndFigureSeries);export default PointAndFigureSeries;